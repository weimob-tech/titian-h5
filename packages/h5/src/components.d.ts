/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ActionItem } from "./components/action-sheet/index";
import { JSXBase } from "@stencil/core/internal";
import { CalDateProps, CalDateTimeType, CalErrorProps, CalRenderDateProps, CalTypeEnum } from "./components/calendar/const";
import { CascadeFn, CascadeOption } from "./components/cascade/cascade";
import { CheckboxItem } from "./components/checkbox-group/index";
import { UploadCamera, UploadFile, UploadFileExternal, UploadLoadComponentType, UploadStatus } from "./components/uploader/uploader";
import { TiRow } from "./components/row";
import { IPosition, OmitType } from "./components/common/interface";
import { Components } from "./components";
import { IStore } from "./components/common/basic/store";
import { TimeGroup } from "./components/countdown/index";
import { DateTimePickerColumnEnum, DateTimePickerEnum } from "./components/datetime-picker/utils";
import { Timeout, TransitionName } from "./components/common/basic/transition";
import { IDialogStaticOptions } from "./components/dialog/types";
import { EDividerOrientation, EDividerPosition } from "./components/divider/const";
import { TiDropdownItemOption } from "./components/dropdown-item/index";
import { IGoodsCart } from "./components/goods-card/index";
import { TiGrid } from "./components/grid";
import { EventDetails } from "./components/input/index";
import { EPosition } from "./components/popup/const";
import { TiProgressGradientColor } from "./components/progress/index";
import { RadioItem } from "./components/radio-group/index";
import { TiStepOption } from "./components/steps/index";
import { CloseParams, OpenParams } from "./components/swipe-cell/index";
import { TiTabsOption } from "./components/tabs/index";
import { ETagShape, ETagSize, ETagVariant } from "./components/tag/const";
import { IToastStaticOptions, IToastText } from "./components/toast/const";
import { Timeout as Timeout1 } from "./components/transition/index";
export { ActionItem } from "./components/action-sheet/index";
export { JSXBase } from "@stencil/core/internal";
export { CalDateProps, CalDateTimeType, CalErrorProps, CalRenderDateProps, CalTypeEnum } from "./components/calendar/const";
export { CascadeFn, CascadeOption } from "./components/cascade/cascade";
export { CheckboxItem } from "./components/checkbox-group/index";
export { UploadCamera, UploadFile, UploadFileExternal, UploadLoadComponentType, UploadStatus } from "./components/uploader/uploader";
export { TiRow } from "./components/row";
export { IPosition, OmitType } from "./components/common/interface";
export { Components } from "./components";
export { IStore } from "./components/common/basic/store";
export { TimeGroup } from "./components/countdown/index";
export { DateTimePickerColumnEnum, DateTimePickerEnum } from "./components/datetime-picker/utils";
export { Timeout, TransitionName } from "./components/common/basic/transition";
export { IDialogStaticOptions } from "./components/dialog/types";
export { EDividerOrientation, EDividerPosition } from "./components/divider/const";
export { TiDropdownItemOption } from "./components/dropdown-item/index";
export { IGoodsCart } from "./components/goods-card/index";
export { TiGrid } from "./components/grid";
export { EventDetails } from "./components/input/index";
export { EPosition } from "./components/popup/const";
export { TiProgressGradientColor } from "./components/progress/index";
export { RadioItem } from "./components/radio-group/index";
export { TiStepOption } from "./components/steps/index";
export { CloseParams, OpenParams } from "./components/swipe-cell/index";
export { TiTabsOption } from "./components/tabs/index";
export { ETagShape, ETagSize, ETagVariant } from "./components/tag/const";
export { IToastStaticOptions, IToastText } from "./components/toast/const";
export { Timeout as Timeout1 } from "./components/transition/index";
export namespace Components {
    interface TestContainer {
    }
    interface TiActionSheet {
        "actions": ActionItem[];
        "alias"?: { [x: string]: string };
        "cancelText": string;
        "hoverClass": string;
        "title": string;
        "visible": boolean;
    }
    interface TiBackTop {
        /**
          * 滚动到顶部时间（ms）
          * @type number
          * @default 300
          * @example <TiBackTop duration={300} />
          * @since 0.1.0
          * @memberOf BackTopProps
         */
        "duration": number;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass": any;
        "extCss": string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "scrollDuration": number;
        /**
          * 设置需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数
          * @type {() => HTMLElement}
          * @default Document
          * @example <TiBackTop target={() => window} />
          * @memberOf BackTopProps
         */
        "target": () => HTMLElement | Window | Document;
        /**
          * 展示文字
          * @type string
          * @default ''
          * @example <TiBackTop text="返回顶部" />
          * @since 0.1.0
          * @memberOf BackTopProps
         */
        "text": string;
        /**
          * 滚动距顶部指定距离后展示
          * @type number
          * @default 400
          * @example <TiBackTop visibilityHeight={100} />
          * @since 0.1.0
          * @memberOf BackTopProps
         */
        "visibilityHeight": number;
    }
    interface TiBadge {
        "atText": boolean;
        "content": string | number;
        "dot": boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass": string;
        "extCss": string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "icon"?: string;
        "offset": any[];
        "spread": ValueOf<typeof EBadgeSpread>;
        "static": boolean;
        "useSlot": boolean;
    }
    interface TiButton {
        "block"?: boolean;
        "buttonInnerClass": string;
        "color"?: string;
        "disabled"?: boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass": string;
        "extCss": string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "hairline"?: boolean;
        "loading"?: boolean;
        "loadingClass": string;
        "loadingSize"?: number;
        "loadingText"?: string;
        "loadingType"?: 'circular' | 'spinner';
        "prefixIcon"?: string;
        "prefixIconClass": string;
        "shape"?: string;
        "size"?: string;
        "suffixIcon"?: string;
        "suffixIconClass": string;
        "type"?: string;
        "variant"?: string;
    }
    interface TiCalendar {
        "allowSameDay": boolean;
        "closeOnMask": boolean;
        "color"?: string;
        "confirmText": string;
        "contentZIndex"?: number;
        "defaultValue"?: CalDateTimeType[] | CalDateTimeType | null;
        "destroyOnClose": boolean;
        "disableGlobalTouchMove"?: boolean;
        "extClass"?: string;
        "extCss": string;
        "extPopupClass"?: string;
        "extPopupContentClass"?: string;
        "extPopupMaskClass"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "formatter"?: (date: CalRenderDateProps) => CalRenderDateProps;
        "maskZIndex"?: number;
        "maxDate"?: number;
        "maxRange": number;
        "maxSize": number;
        "minDate"?: number;
        "mode": `${CalTypeEnum}`;
        "position": HTMLTiPopupElement['position'];
        "round": boolean;
        "start": string;
        "title": string;
        "usePopup"?: boolean;
        "value"?: CalDateTimeType[] | CalDateTimeType | null;
        "visible": boolean;
    }
    interface TiCascade {
        "active": number;
        "cascade": string;
        "code": string;
        "extHeaderStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "extOptionItemStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "extTabStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "getOptions"?: CascadeFn;
        "label": string;
        "options": { [key: string | number]: unknown }[];
        "tabs": string[];
        "title": string;
        "titlebar"?: boolean;
        "value": unknown[];
    }
    interface TiCell {
        /**
          * 内容块的横向排列方式
          * @type string
          * @default center
          * @example <TiCell alignItems="center" />
          * @since 0.1.0
         */
        "alignItems": 'center' | 'flex-start' | 'flex-end' | 'baseline' | 'stretch' | 'start' | 'end';
        /**
          * 是否显示右侧箭头
          * @type boolean
          * @default true
          * @example <TiCell arrow="{{false}}" />
          * @since 0.1.0
         */
        "arrow"?: boolean;
        /**
          * 是否开启点击反馈
          * @type boolean
          * @default true
          * @example <TiCell clickable />
          * @since 0.1.0
         */
        "clickable"?: boolean;
        /**
          * 图标颜色
          * @type string
          * @default ''
          * @example <TiCell color="red" />
          * @since 0.1.0
         */
        "color"?: string;
        /**
          * 副标题，右侧描述信息
          * @type string
          * @default ''
          * @example <TiCell title="标题" desc="副标题" />
          * @since 0.1.0
         */
        "desc"?: string;
        "descClass"?: string;
        /**
          * 是否禁用单元格
          * @type boolean
          * @default false
          * @example <TiCell title="标题" disabled />
          * @since 0.1.0
         */
        "disabled"?: boolean;
        /**
          * 是否显示分割线
          * @type boolean
          * @default true
          * @example <TiCell divider={false} title="没有分割线" />
          * @since 0.1.0
         */
        "divider"?: boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss": string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        /**
          * 图标
          * @type string
          * @default ''
          * @example <TiCell title="标题" icon="home" />
          * @since 0.1.0
         */
        "icon"?: string;
        /**
          * 右侧图标的尺寸
          * @type number
          * @default 36
          * @example <TiCell iconSize={36} />
          * @since 0.1.0
         */
        "iconSize"?: string | number;
        /**
          * 标题下面的内容
          * @type string
          * @default ''
          * @example <TiCell title="标题" label="标题下面的内容" />
          * @since 0.1.0
         */
        "label"?: string;
        "labelClass"?: string;
        /**
          * 是否必须选择
          * @type boolean
          * @default false
          * @example <TiCell required />
          * @since 0.1.0
         */
        "required"?: boolean;
        /**
          * 右侧图标
          * @type string
          * @default ''
          * @example <TiCell title="标题" rightIcon="checked" />
          * @since 0.1.0
         */
        "rightIcon"?: string;
        /**
          * 右侧图标的尺寸
          * @type number
          * @default 28
          * @example <TiCell right-icon-size="{{ 28 }}" />
          * @since 0.1.0
         */
        "rightIconSize"?: string | number;
        /**
          * 副标题下面的内容
          * @type string
          * @default ''
          * @example <TiCell subDesc="副标题下面的内容" />
          * @since 0.1.0
         */
        "subDesc"?: string;
        /**
          * 标题
          * @type string
          * @default ''
          * @example <TiCell title="标题" />
          * @since 0.1.0
         */
        "title": string | any;
        "titleClass"?: string;
        "titleWidth"?: string;
        "titleWrapClass"?: string;
        "useSubArrow"?: boolean;
    }
    interface TiCellGroup {
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass": any;
        "extCss": string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        /**
          * 单元格组模式
          * @type string
          * @default default
          * @enum , card
          * @example <TiCellGroup mode="card" />
          * @since 0.1.0
          * @memberOf CellGroupProps
         */
        "mode": 'default' | 'card';
        /**
          * 单元格组副标题
          * @type string
          * @default ''
          * @example <TiCellGroup sub-title="单元格组副标题" />
          * @since 0.1.0
          * @memberOf CellGroupProps
         */
        "subTitle": string;
        /**
          * 自定义 group sub title 的 part 属性
         */
        "subTitleClass": string;
        /**
          * 单元格组副标题
          * @type string
          * @default ''
          * @example <TiCellGroup title="单元格组标题" />
          * @since 0.1.0
          * @memberOf CellGroupProps
         */
        "title": string;
        /**
          * 自定义 group title 的 part 属性
         */
        "titleClass": string;
        /**
          * 自定义 title wrap 的 part 属性
         */
        "titleWrapClass": string;
    }
    interface TiCheckbox {
        /**
          * 指定当前是否选中, 此模式下为控制型组件
          * @type boolean
          * @default false
          * @example <TiCheckbox checked />
          * @since 0.1.0
         */
        "checked": boolean | null;
        /**
          * 单选框颜色配置
          * @type string
          * @default ''
          * @example <TiCheckbox color="red" />
          * @since 0.1.0
         */
        "color": string;
        /**
          * 初始是否选中, 此模式下为非控制型组件
          * @type boolean
          * @default false
          * @example <TiCheckbox defaultChecked />
          * @since 0.1.0
         */
        "defaultChecked": boolean | null;
        /**
          * 指定当前是否禁用
          * @type boolean
          * @default false
          * @example <TiCheckbox disabled />
          * @since 0.1.0
         */
        "disabled": boolean | null;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss": string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        /**
          * 自定义图标名称
          * @type string
          * @default 'checkbox-hollow'
          * @example <TiCheckbox icon="checkbox" />
          * @since 0.1.0
         */
        "icon": string | boolean;
        "iconClass"?: string;
        /**
          * 文字内容
          * @type string
          * @default ''
          * @example <TiCheckbox cancelable />
          * @since 0.1.0
         */
        "label": string;
        /**
          * 指定当前文字是否禁用点击
          * @type boolean
          * @default false
          * @example <TiCheckbox labelDisabled />
          * @since 0.1.0
         */
        "labelDisabled": boolean | null;
        /**
          * 单选框圆角度数
          * @type string
          * @default circle
          * @enum , square
          * @example <TiCheckbox shape="square" />
          * @since 0.1.0
         */
        "shape": 'square' | 'circle' | 'none' | number;
        /**
          * 自定义图标尺寸
          * @type number
          * @default 32
          * @example <TiCheckbox icon="checkbox" size={32} />
          * @since 0.1.0
         */
        "size": number;
        "updateDataFromParent": (parent: ParentAttrs) => Promise<void>;
        /**
          * 根据 value 进行比较，判断是否选中
          * @type string
          * @default ''
          * @example <TiCheckbox value="1" />
          * @since 0.1.0
         */
        "value": number | string;
    }
    interface TiCheckboxButton {
        /**
          * 指定当前是否选中, 此模式下为控制型组件
          * @type boolean
          * @default false
          * @example <TiCheckboxButton checked />
          * @since 0.1.0
         */
        "checked": boolean | null;
        /**
          * 单选框颜色配置
          * @type string
          * @default ''
          * @example <TiCheckboxButton color="red" />
          * @since 0.1.0
         */
        "color": string;
        /**
          * 初始是否选中, 此模式下为非控制型组件
          * @type boolean
          * @default false
          * @example <TiCheckboxButton defaultChecked />
          * @since 0.1.0
         */
        "defaultChecked": boolean | null;
        /**
          * 指定当前是否禁用
          * @type boolean
          * @default false
          * @example <TiCheckboxButton disabled />
          * @since 0.1.0
         */
        "disabled": boolean | null;
        "extClass"?: string;
        "extCss": string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        /**
          * 自定义图标名称
          * @type string
          * @default 'checkbox-hollow'
          * @example <TiCheckboxButton icon="checkbox" />
          * @since 0.1.0
         */
        "icon": string;
        /**
          * 文字内容
          * @type boolean
          * @default false
          * @example <TiCheckboxButton label="文字" />
          * @since 0.1.0
         */
        "label": string;
        "leftIcon": string;
        "updateDataFromParent": (parent: ParentAttrs) => Promise<void>;
        /**
          * 根据 value 进行比较，判断是否选中
          * @type string
          * @default ''
          * @example <TiCheckboxButton value="1" />
          * @since 0.1.0
         */
        "value": number | string;
    }
    interface TiCheckboxGroup {
        /**
          * 单选框颜色配置
          * @type string
          * @default ''
          * @example <TiCheckboxGroup color="red" />
          * @since 0.1.0
         */
        "color": string;
        /**
          * 默认选中的值
          * @type string
          * @default []
          * @example <TiCheckboxGroup defaultValue={[1]} />
          * @since 0.1.0
         */
        "defaultValue": Array<string | number>;
        /**
          * 子组件排列方向
          * @type string
          * @default 'horizontal'
          * @enum 
          * @example <TiCheckboxGroup direction="vertical" />
          * @since 0.1.0
         */
        "direction": 'horizontal' | 'vertical';
        /**
          * 指定当前是否禁用
          * @type boolean
          * @default false
          * @example <TiCheckboxGroup disabled />
          * @since 0.1.0
         */
        "disabled": any;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass": string;
        "extCss": string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "getInstance": () => Promise<this>;
        /**
          * 自定义图标名称
          * @type string
          * @default ''
          * @example <TiCheckboxGroup icon="checkbox" />
          * @since 0.1.0
         */
        "icon": string;
        /**
          * 指定当前文字是否禁用点击
          * @type boolean
          * @default false
          * @example <TiCheckboxGroup labelDisabled />
          * @since 0.1.0
         */
        "labelDisabled": boolean;
        /**
          * 设置当前最多选择的数量
          * @type number
          * @default Infinity
          * @example <TiCheckboxGroup max={2} />
          * @since 0.1.0
         */
        "max": number;
        /**
          * 以配置形式设置子元素
          * @type array
          * @default []
          * @example <TiCheckboxGroup options={ [{value: 'name1', label: 'name1'},{value: 'name2', label: 'name2'},{value: 'name3', label: 'name3'}] }/>
          * @since 0.1.0
         */
        "options": CheckboxItem[];
        /**
          * 单选框圆角度数
          * @type string
          * @default circle
          * @enum , square
          * @example <TiCheckboxGroup shape="square" />
          * @since 0.1.0
         */
        "shape": 'square' | 'circle' | 'none' | number;
        /**
          * 多选框尺寸
          * @type number
          * @default ''
          * @example <TiCheckboxGroup size={32} />
          * @since 0.1.0
         */
        "size": number;
        /**
          * 用于指定当前选中的选项
          * @type string
          * @default ''
          * @example <TiCheckboxGroup value={[1]} />
          * @since 0.1.0
         */
        "value": Array<string | number> | string;
    }
    interface TiChoose {
        "accept"?: string;
        "afterChoose"?: (chooseFileList: UploadFileExternal[], fileList: UploadFileExternal[]) => UploadFileExternal[];
        "beforeChoose"?: BeforeChooseType;
        "camera"?: `${UploadCamera}`;
        "choose"?: (list: UploadFile[]) => Promise<UploadFileExternal[]>;
        "chooseIcon"?: string;
        "chooseText"?: string;
        "cols"?: number;
        "count"?: number;
        "disabled"?: boolean;
        "extClass"?: string;
        "fileKeyList": string[];
        "fileMap": Map<string, UploadFile>;
        "immediatelyChoose"?: boolean;
        "maxSize"?: number;
        "onSelect": (event?: MouseEvent) => Promise<void>;
        "pure"?: boolean;
        "size"?: 'small' | 'large';
        "sourceType"?: ('album' | 'camera')[];
    }
    interface TiCircleProgress {
        "buffer": number;
        "bufferBgColor"?: string;
        "color"?: string;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss": string;
        "font"?: string;
        "showProgress"?: boolean;
        "size": number;
        "strokeColor"?: string;
        "strokeWidth": number;
        "value": number;
    }
    interface TiCol {
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass": string;
        "extCss": string;
        /**
          * 栅格左侧的偏移格数
          * @type number
          * @default 0
          * @example <TiCol span={2} offset={1} />
          * @since 0.1.0
          * @memberOf ColProps
         */
        "offset": number;
        /**
          * 栅格占位格数，为 0 时相当于 `display: none`
          * @type number
          * @default 0
          * @example <TiCol span={2} />
          * @since 0.1.0
          * @memberOf ColProps
         */
        "span": number;
        "updateDataFromParent": (parent$0?: HTMLTiRowElement | TiRow) => Promise<void>;
    }
    interface TiCollapse {
        "clickable"?: boolean;
        "disabled"?: boolean;
        "divider"?: boolean;
        "extCss": string;
        "extOptionClass"?: string;
        "extOptionContentClass"?: string;
        "extOptionStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "getImperativeHandle": () => Promise<{ children: HTMLTiCollapseItemElement[]; selectValue: string | number | (string | number)[]; }>;
        "icon"?: string;
        "options": (OmitType<Components.TiCollapseItem, (...args: any) => any> & { content: string })[] | string;
        "repel"?: boolean;
        "rightIcon"?: string;
        "switch": (name: string | number, status: boolean) => Promise<void>;
        "value"?: string | number | Array<string | number>;
    }
    interface TiCollapseItem {
        "clickable"?: boolean;
        "desc"?: string;
        "disabled"?: boolean;
        "divider"?: boolean;
        "extClass"?: string;
        "extContentClass"?: string;
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "icon"?: string;
        "label"?: string;
        "rightIcon"?: string;
        "title": string;
        "updateDataFromParent": () => Promise<void>;
        "useRightIconSlot"?: boolean;
        "value"?: string | number;
    }
    interface TiConfigProvider {
        "enableTitianIcon": IStore['enableTitianIcon'];
        "iconClassPrefix": IStore['iconClassPrefix'];
        "locale": IStore['locale'];
    }
    interface TiCountdown {
        "autoplay": boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss": string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "format": string;
        "pause": () => Promise<void>;
        "reset": () => Promise<void>;
        "size": 'small' | 'medium' | 'big' | 'large';
        "start": () => Promise<void>;
        "time": number;
        "useSlot": boolean;
        "variant": 'pure' | 'block' | 'mixture';
    }
    interface TiDatetimePicker {
        "cancelText"?: string;
        "confirmText"?: string;
        "dayUseSelectSlot"?: boolean;
        "extClass"?: string;
        "extHairlineClass"?: string;
        "extMaskClass"?: string;
        "extOptionClass"?: string;
        "extOptionItemClass"?: string;
        "extOptionStyle"?: JSXBase.HTMLAttributes<Record<string, unknown>>['style'] | string;
        "extStyle"?: JSXBase.HTMLAttributes<Record<string, unknown>>['style'] | string;
        "filter"?: (
    type: DateTimePickerColumnEnum,
    values: {
      [x: string]: unknown;
      value: number;
    }[],
    params: { day: unknown; hour: unknown; minute: unknown; year: unknown; month: unknown },
  ) => unknown;
        "formatter"?: (
    type: DateTimePickerColumnEnum,
    value: number,
    params: { day: unknown; hour: unknown; minute: unknown; year: unknown; month: unknown },
  ) => unknown;
        "hourUseSelectSlot"?: boolean;
        "label"?: string;
        "loading"?: boolean;
        "maxDate": number;
        "minDate": number;
        "minuteUseSelectSlot"?: boolean;
        "monthUseSelectSlot"?: boolean;
        "optionItemHeight"?: string | number;
        "sort"?: DateTimePickerColumnEnum[];
        "subTitle"?: string;
        "title": string;
        "titlebar": boolean;
        "type"?: `${DateTimePickerEnum}`;
        "value": unknown;
        "visibleItemCount"?: number;
        "yearUseSelectSlot"?: boolean;
    }
    interface TiDialog {
        "cancelBtnText"?: string;
        "cancelButtonBgColor"?: string;
        "cancelButtonColor"?: string;
        "close": () => Promise<void>;
        "closeOnActions"?: boolean;
        "closeOnMask"?: boolean;
        "confirmBtnText"?: string;
        "confirmButtonBgColor"?: string;
        "confirmButtonColor"?: string;
        "content": string;
        "extActionCancelClass"?: string;
        "extActionConfirmClass"?: string;
        "extActionsClass"?: string;
        "extClass"?: string;
        "extContentClass"?: string;
        "extCss": string;
        "extInnerClass"?: string;
        "extPopupClass"?: string;
        "extPopupContentClass"?: string;
        "extPopupMaskClass"?: string;
        "extStyle"?: JSXBase.HTMLAttributes<Record<string, unknown>>['style'] | string;
        "extTitleClass"?: string;
        "hasCancelButton"?: boolean;
        "isTextButton"?: boolean;
        "show": (opts: IDialogStaticOptions) => Promise<void>;
        "timeout"?: number | Timeout;
        "title": string;
        "transition"?: TransitionName;
        "useActionsSlot"?: boolean;
        "useContentSlot"?: boolean;
        "visible"?: boolean;
        "zIndex": number;
    }
    interface TiDivider {
        "borderColor"?: string;
        "borderWidth": number;
        "color"?: string;
        "dashed": boolean;
        "extClass"?: string;
        "extCss": string;
        "extStyle"?: JSXBase.HTMLAttributes<any>['style'] | string;
        "hairline": boolean;
        "orientation": `${EDividerOrientation}`;
        "textAlign": `${EDividerPosition}`;
    }
    interface TiDropdownItem {
        "activeColor": string;
        "closeOnMask": boolean;
        "direction": 'up' | 'down';
        "disabled": boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass": string;
        "extCss": string;
        "getInstance": () => Promise<this>;
        "hasMask": boolean;
        "hasSubmit": boolean;
        "icon": string;
        "mode": 'single' | 'multiple';
        "options": TiDropdownItemOption[] | string;
        "submitText": string;
        "title": string;
        "toggle": () => Promise<void>;
        "type": 'checkbox' | 'switch';
        "value": string | number | Array<string | number>;
        "visible": boolean;
    }
    interface TiDropdownMenu {
        "activeColor": string;
        "closeOnMask": boolean;
        "direction": 'up' | 'down';
        "disabled": boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass": string;
        "extCss": string;
        "getInstance": () => Promise<this>;
        "getPosition"?: (rect: { rect: DOMRect; direction: 'up' | 'down'; position: IPosition }) => IPosition;
        "hasMask": boolean;
        "icon": string;
        "mode": 'single' | 'multiple';
        "titleClass": string;
        "type": null;
    }
    interface TiEmpty {
        "extClass"?: string;
        "extCss": string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "image"?: string;
        "size"?: string | number;
        "subTitle"?: string;
        "title": string;
        "useImageSlot"?: boolean;
        "useTitleSlot"?: boolean;
    }
    interface TiGoodsCard {
        "extCss": string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "goodsData": IGoodsCart;
    }
    interface TiGrid {
        /**
          * 是否使用外边框
          * @deprecated 请使用 `divider` 替代
          * @type boolean
          * @default true
          * @example <TiGrid border />
          * @since 0.1.0
         */
        "border": boolean;
        /**
          * 宫格的每行展示的个数， 默认为 `4` 个
          * @type number
          * @default 4
          * @example <TiGrid col="3" />
          * @since 0.1.0
         */
        "columns": number;
        /**
          * 排列方向
          * @type string
          * @default 'column'
          * @enum 
          * @example <TiGrid direction="row" />
          * @since 0.1.0
         */
        "direction": 'row' | 'column';
        /**
          * 是否使用外边框
          * @type boolean
          * @default true
          * @example <TiGrid border />
          * @since 0.1.0
         */
        "divider": boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss": string;
        /**
          * 宫格之间的间隙宽度
          * @type number
          * @default 0
          * @example <TiGrid gutter="16" />
          * @since 0.1.0
         */
        "gutter": number;
        /**
          * 是否以自适应正方形展示
          * @type boolean
          * @default false
          * @example <TiGrid square />
          * @since 0.1.0
         */
        "square": boolean;
        /**
          * 宫格标题
          * @type string
          * @default ''
          * @example <TiGrid title="自定义图标，文字内容">  <TiGridItem icon="home" text="Grid" />  <TiGridItem icon="cart" text="购物车" />  <TiGridItem icon="phone" text="电话" /> </TiGrid>
          * @since 0.1.0
         */
        "title": string;
    }
    interface TiGridItem {
        /**
          * 文字颜色
          * @type string
          * @default ''
          * @example <TiGridItem icon="home" text="Grid" color="red" />
          * @since 0.1.0
         */
        "color"?: string;
        "contentClass"?: string;
        /**
          * 是否自定义内容
          * @type boolean
          * @default false
          * @example <TiGridItem customContent />
          * @since 0.1.0
         */
        "customContent"?: boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss": string;
        /**
          * 图标
          * @type string
          * @default ''
          * @example <TiGridItem icon="home" text="Grid" />
          * @since 0.1.0
         */
        "icon"?: string;
        "iconClass"?: string;
        /**
          * 图标尺寸
          * @type number
          * @default ''
          * @example <TiGridItem icon="home" text="Grid" size={{32}} />
          * @since 0.1.0
         */
        "size"?: number;
        /**
          * 文字内容
          * @type string
          * @default ''
          * @example <TiGridItem icon="home" text="Grid" />
          * @since 0.1.0
         */
        "text"?: string;
        "textClass"?: string;
        "updateDataFromParent": (parent?: HTMLTiGridElement | TiGrid) => Promise<void>;
    }
    interface TiIcon {
        "color"?: string;
        "extClass"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "hyphen"?: string;
        "iconStyle"?: string;
        "name"?: string;
        "prefix": string;
        "rotate"?: string | number;
        "size"?: string | number;
        "spin"?: boolean;
    }
    interface TiImage {
        "alt": string;
        "aspectRatio"?: number | 'inherit';
        "errorIcon"?: string;
        "errorIconSize"?: number;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss": string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "height"?: string | number;
        "lazyLoad"?: boolean;
        "loadingIcon"?: string;
        "loadingIconSize"?: number;
        "mode"?: ImageModeEnum;
        "radius"?: string | number;
        "showError"?: boolean;
        "showLoading"?: boolean;
        "src": string;
        "useErrorSlot"?: boolean;
        "useGlobalStyle"?: boolean;
        "useLoadingSlot"?: boolean;
        "width"?: string | number;
    }
    interface TiInput {
        "autofocus": boolean;
        "clearable"?: boolean;
        "confirmType": 'done' | 'send' | 'search' | 'next' | 'go';
        "disabled"?: boolean;
        "divider"?: boolean;
        "ellipsisLine": number;
        "error"?: boolean;
        "errorMessage"?: string;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss": string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "inputClass"?: string;
        "inputmode": 'text' | 'none' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';
        "label"?: string;
        "labelClass"?: string;
        "maxlength"?: number;
        "placeholder"?: string;
        "prefixIcon"?: string;
        "readOnly"?: boolean;
        "required"?: boolean;
        "showClearIcon"?: boolean;
        "textAlign"?: 'left' | 'right';
        "type"?: 'text' | 'number' | 'safe-password' | 'digit';
        "value"?: string;
    }
    interface TiInputNumber {
        "asyncChange": boolean;
        "autoWidth": boolean;
        "border": boolean;
        "disabled": boolean;
        "disabledInput": boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass": string;
        "extCss": string;
        "extInputClass": string;
        "extMinusClass": string;
        "extPlusClass": string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "initOnlyPlus": boolean;
        "inputWidth": number;
        "integer": boolean;
        "max": number;
        "min": number;
        "readOnly": boolean;
        "readOnlyInput": boolean;
        "round": boolean;
        "size": 'medium' | 'big';
        "step": number;
        "thumbnail": boolean;
        "value": number | string;
        "variant": 'pure' | 'block' | 'bright';
    }
    interface TiLoading {
        "color": string;
        /**
          * 图标颜色
          * @type {string}
          * @default ''
          * @enum ://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-direction
          * @example <ti-loading align="horizontal" />
          * @since 0.1.0
          * @memberOf LoadingProps
         */
        "direction": string;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss": string;
        /**
          * loading 展示模式
          * @type {string}
          * @default 'circular'
          * @enum 
          * @example <TiLoading mode="circular" />
          * @since 0.1.0
          * @memberOf LoadingProps
         */
        "mode": 'circular' | 'spinner';
        /**
          * loading 尺寸
          * @type {number}
          * @default 72
          * @example <TiLoading size={100} />
          * @since 0.1.0
          * @memberOf LoadingProps
         */
        "size": number;
        /**
          * 加载文字
          * @type {string}
          * @default ''
          * @example <TiLoading text="加载中" />
          * @since 0.1.0
          * @memberOf LoadingProps
         */
        "text": string;
    }
    interface TiNavbar {
        "background": string;
        "extClass": string;
        "extCss": string;
        "extStyle": string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "extSubtitleClass": string;
        "extTitleClass": string;
        "fontColor": string;
        "frostedGlass": boolean;
        "leftIcons": string[];
        "loading": boolean;
        "rightIcons": string[];
        "subtitle": string;
        "subtitleHeight": number;
        "title": string;
        "type": 'normal' | 'immersion';
        "updateOpacity": (e: { scrollTop: number; }) => Promise<void>;
        "useBackButton": boolean;
        "useHomeButton": boolean;
        "usePlaceholder": boolean;
    }
    interface TiNoticeBar {
        "close": () => Promise<void>;
        "color": string;
        "content": string | string[];
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass": string;
        "extCss": string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "leftIcon": string;
        "rightIcon": string;
        "scrollable": string | boolean;
        "speed": number;
        "textMode": 'auto' | 'wrap' | 'ellipsis' | 'clip';
        "variant": 'horizontal' | 'vertical';
    }
    interface TiPicker {
        "cancelText"?: string;
        "cascade": T;
        "confirmText"?: string;
        "extClass"?: string;
        "extCss": string;
        "extHairlineClass"?: string;
        "extMaskClass"?: string;
        "extOptionClass"?: string;
        "extOptionItemClass"?: string;
        "extOptionStyle"?: JSXBase.HTMLAttributes<Record<string, unknown>>['style'] | string;
        "extStyle"?: JSXBase.HTMLAttributes<Record<string, unknown>>['style'] | string;
        "getImperativeHandle": () => Promise<{ children: HTMLTiPickerColumnElement[]; top: number; height: number; }>;
        "label"?: string;
        "loading": boolean;
        "onReachBottom": (e: CustomEvent<{ rowIndex: number; colAlias: number | string; }>) => Promise<void>;
        "onReachTop": (e: CustomEvent<{ rowIndex: number; colAlias: number | string; }>) => Promise<void>;
        "onSelect": (e: CustomEvent<{ rowIndex: number; colAlias: string | number; }>) => Promise<void>;
        "optionItemHeight": string | number;
        "options": any[];
        "rowAlias"?: string | number;
        "sports": boolean;
        "subTitle": string;
        "title": string;
        "titlebar"?: boolean;
        "updateColumn": (colAlias: string | number, value: { value: unknown; options: unknown; rowIndex?: unknown; colIndex?: number; rowAlias?: unknown; }, inSelect?: boolean) => Promise<void>;
        "useRowIndex": boolean;
        "value": any[];
        "visibleItemCount"?: number;
    }
    interface TiPickerColumn {
        "calcDistance": ({ columns, value }: { columns: unknown[]; value: unknown; }) => Promise<void>;
        "colAlias": string;
        "columns": unknown[];
        "extClass"?: string;
        "extCss": string;
        "extOptionItemClass"?: string;
        "extStyle"?: JSXBase.HTMLAttributes<Record<string, unknown>>['style'] | string;
        "height"?: number;
        "label"?: string;
        "row"?: number;
        "rowAlias"?: string | number;
        "sports"?: boolean;
        "top"?: number;
        "useRowIndex"?: boolean;
        "useSelectSlot"?: boolean;
        "value": unknown;
    }
    interface TiPopup {
        "closeOnMask"?: boolean;
        "contentZIndex"?: number;
        "destroyOnClose"?: boolean;
        "disableGlobalTouchMove"?: boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extContentClass"?: string;
        "extContentStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "extCss": string;
        "extMaskClass"?: string;
        "extMaskStyle": {};
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "hasMask"?: boolean;
        "maskZIndex"?: number;
        "position"?: `${EPosition}`;
        "preventScroll"?: boolean;
        "radius"?: string | number;
        "safeArea"?: boolean;
        "timeout"?: number | Timeout;
        "timingFunction"?: string;
        "transition"?: TransitionName;
        "visible"?: boolean;
    }
    interface TiPopupTitlebar {
        "cancelText"?: string;
        "confirmText"?: string;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        "extLeftClass"?: string;
        "extRightClass"?: string;
        "extRightIconClass"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "extTitleClass"?: string;
        "subTitle"?: string;
        "title": string;
        "variant"?: string;
    }
    interface TiPortal {
        "reference": HTMLElement;
        "target": HTMLElement;
    }
    interface TiPreview {
        "displayNumber": boolean;
        "displayTitle": boolean;
        "show": (list?: IPreviewItem[], index?: number) => Promise<void>;
    }
    interface TiPrice {
        "extClass"?: string;
        "extCss": string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "label": string;
        "prefix": string;
        "radix": number;
        "suffix": string;
        "unit": string;
        "value": number;
    }
    interface TiProgress {
        "buffer": number;
        "bufferBgColor"?: string;
        "color"?: string;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss": string;
        "gradientColor"?: TiProgressGradientColor | string;
        "showProgress"?: boolean;
        "strokeColor"?: string;
        "strokeWidth"?: number;
        "value"?: number;
    }
    interface TiRadio {
        "checked"?: boolean;
        "color"?: string;
        "defaultChecked"?: boolean;
        "disabled"?: boolean | null;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss": string;
        "icon"?: boolean | string;
        "iconClass"?: string;
        "label"?: string;
        "labelDisabled"?: boolean | null;
        "shape": 'square' | 'circle' | 'none' | number;
        "size"?: number;
        "updateDataFromParent": (parent: ParentAttrs) => Promise<void>;
        "value"?: string | number;
    }
    interface TiRadioButton {
        "checked"?: boolean;
        "color"?: string;
        "defaultChecked"?: boolean;
        "disabled"?: boolean | null;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass": string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "icon": string;
        "label"?: string;
        "updateDataFromParent": (parent: ParentAttrs) => Promise<void>;
        "value"?: string | number;
    }
    interface TiRadioGroup {
        "color": string;
        "defaultValue": string | number;
        "direction": 'horizontal' | 'vertical';
        "disabled": boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss": string;
        "getInstance": () => Promise<this>;
        "icon": string;
        "labelDisabled": boolean;
        "options": RadioItem[];
        "shape": 'square' | 'circle' | 'none' | number;
        "size": number;
        "value": string | number;
    }
    interface TiRate {
        "allowHalf": boolean;
        "clearable": boolean;
        "count": number;
        "disabled": boolean;
        "emptyIcon": string;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss": string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "icon": string;
        "iconSize": string;
        "readOnly": boolean;
        "value": number;
    }
    interface TiRow {
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass": string;
        "extCss": string;
        /**
          * 额外的样式
         */
        "extStyle": {};
        /**
          * 是否是 flex 布局
          * @type boolean
          * @default true
          * @example <ti-row flex>  <ti-col span="6">col 6</ti-col>  <ti-col span="6">col 6</ti-col>  <ti-col span="6">col 6</ti-col>  <ti-col span="6">col 6</ti-col> </ti-row>
          * @since 0.1.0
         */
        "flex": boolean;
        /**
          * 列元素之间的间距
          * @type number
          * @default 0
          * @example <ti-row gutter="{{ 16 }}">  <ti-col span="6">col 6</ti-col>  <ti-col span="6">col 6</ti-col>  <ti-col span="6">col 6</ti-col>  <ti-col span="6">col 6</ti-col> </ti-row>
          * @since 0.1.0
         */
        "gutter": number;
    }
    interface TiSafeArea {
        "position": ESafeArea;
    }
    interface TiScrollView {
        "curScrollIntoView"?: string;
        "curScrollLeft"?: number | string;
        "curScrollTop"?: number | string;
        "extClass"?: string;
        "extCss": string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "extVirtualStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "lowerThreshold": number | string;
        "refresherEnabled"?: boolean;
        "scrollWithAnimation": boolean;
        "scrollX": boolean;
        "scrollY": boolean;
        "upperThreshold": number | string;
    }
    interface TiSearch {
        "alwaysShowPrefix": boolean;
        "alwaysShowRightIcon": boolean;
        "alwaysShowSearch": boolean;
        "alwaysShowSuffix": boolean;
        "animation": boolean;
        "autofocus": boolean;
        "center": boolean;
        "clearable": boolean;
        "confirmType": string;
        "disabled": boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass": string;
        "extCss": string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "inputClass": string;
        "leftIcon": string;
        "placeholder": string;
        "readOnly": boolean;
        "searchButtonClass": string;
        "searchInnerClass": string;
        "useSearchButton": boolean;
        "value": string;
    }
    interface TiShareSheet {
        "cancelText": string;
        "closeOnMask": boolean;
        "extClass"?: string;
        "extPopupClass"?: string;
        "extPopupContentClass": string;
        "extPopupMaskClass"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes['style'];
        "extTitleClass"?: string;
        "options": ShareSheetProps[] | ShareSheetProps[][];
        "subTitle": string;
        "title": string;
        "visible": boolean;
    }
    interface TiSidebar {
        "activeIndex"?: number;
        "extClass"?: string;
        "extCss": string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "getImperativeHandle": () => Promise<{ children: HTMLTiSidebarItemElement[]; activeIndex: number; }>;
        "setActive": (index: number) => Promise<void>;
    }
    interface TiSidebarItem {
        "badge": string;
        "disabled": boolean;
        "dot": boolean;
        "extClass"?: string;
        "extCss": string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "label": string;
        "updateDataFromParent": () => Promise<void>;
    }
    interface TiSku {
        "defaultDispayInfo": {};
        "extCss": string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "hasQuantityEditor": boolean;
        "hasSelectedSpecsText": boolean;
        "priceUnit": string;
        "skus": any[];
        "specs": any[];
        "value": string;
    }
    interface TiSkuSelector {
        "extCss": string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "optionIds": any[];
        "skus": any[];
        "specs": any[];
        "value": string;
    }
    interface TiSlider {
        "extCss": string;
        "max": number;
        "min": number;
        "railClass"?: string;
        "step": number;
        "thumbClass"?: string;
        "trackClass"?: string;
        "value": number | number[];
    }
    interface TiSteps {
        "activeColor": string;
        "alias"?: Record<string, string>;
        "current": number | number[];
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss": string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "icon": string;
        "options": TiStepOption[];
        "subtitleAlign": 'left' | 'right';
    }
    interface TiSticky {
        "container": () => HTMLElement;
        "disabled": boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss": string;
        "offsetTop": number;
        "usePureCss": boolean;
        "zIndex": number;
    }
    interface TiSvgPathView {
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string;
        "fills": string | string[];
        "name"?: string;
        "paths"?: JSXBase.SVGAttributes | JSXBase.SVGAttributes[];
        "rotate"?: string;
        "size"?: string | number;
        "spin"?: boolean;
        "useMask"?: boolean;
        "viewBox"?: string;
    }
    interface TiSwipeCell {
        "asyncClose": boolean;
        "disabled": boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass": string;
        "extCss": string;
        "leftWidth": number;
        "name"?: string;
        "rightWidth": number;
        "visible": boolean;
    }
    interface TiSwiper {
        "autoplay": boolean;
        "centeredSlides"?: boolean;
        "current": number;
        "displayMultipleItems": number;
        "duration": number;
        "extClass"?: string;
        "extContentClass"?: string;
        "extCss": string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "getInstance": () => Promise<this>;
        "interval": number;
        "loop": boolean;
        "pagination": 'bullets' | 'fraction' | 'none';
        "spaceBetween": number;
        "sports"?: boolean;
        "vertical"?: boolean;
    }
    interface TiSwiperItem {
        "itemId"?: string;
        "skipHiddenItemLayout": boolean;
        "updateDataFromParent": (parent: any, curIndex?: any) => Promise<void>;
    }
    interface TiSwitch {
        "activeColor"?: string;
        "color"?: string;
        "defaultValue"?: boolean;
        "disabled"?: boolean;
        "extClass"?: string;
        "extCss": string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "loading"?: boolean;
        "size"?: number;
        "value"?: unknown;
    }
    interface TiTabbar {
        "activeColor"?: string;
        "color"?: string;
        "extClass"?: string;
        "extCss": string;
        "extOptionClass"?: string;
        "extOptionStyle"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "getImperativeHandle": () => Promise<{ children: HTMLTiTabbarItemElement[]; selectValue: unknown; }>;
        "iconSize"?: number;
        "options"?: Omit<Components.TiTabbarItem, 'updateDataFromParent'>[];
        "placeholder": boolean;
        "safeArea"?: boolean;
        "separation": `${SeparationEnum}`;
        "switch": (active: unknown) => Promise<void>;
        "titleSize"?: number;
        "value": unknown;
    }
    interface TiTabbarItem {
        "activeColor"?: string;
        "color"?: string;
        "extClass"?: string;
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "icon"?: string;
        "iconSize"?: number;
        "title": string;
        "titleSize"?: number;
        "updateDataFromParent": () => Promise<void>;
        "value"?: unknown;
    }
    interface TiTabs {
        "activeTab"?: number | string;
        "alias"?: Record<string, string>;
        "asyncChange": boolean;
        "autoGap"?: boolean;
        "count": number;
        "disabledTabs": unknown[];
        "divider"?: `${ETabsDivider}`;
        "extClass"?: string;
        "extCss": string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "focusUpdate"?: boolean;
        "gap"?: number;
        "offsetTop": number;
        "sticky"?: boolean;
        "swiperClass"?: string;
        "tabActiveClass"?: string;
        "tabClass": string;
        "tabKey"?: string;
        "tabTextActiveClass": string;
        "tabTextClass"?: string;
        "tabWidth"?: number;
        "tabs": (string | TiTabsOption)[];
        "tabsClass"?: string;
        "tabsMarkClass"?: string;
        "usePureCss"?: boolean;
        "useSlot"?: boolean;
        "variant"?: `${ETabsVariant}`;
    }
    interface TiTag {
        "color"?: string;
        "extClass"?: string;
        "extCss": string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "leftIcon"?: string;
        "rightIcon"?: string;
        "shape"?: `${ETagShape}`;
        "size"?: `${ETagSize}`;
        "variant"?: `${ETagVariant}`;
    }
    interface TiTextarea {
        "autoHeight"?: boolean;
        "autofocus": boolean;
        "disabled"?: boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss": string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "maxlength"?: number;
        "placeholder"?: string;
        "showCount"?: boolean;
        "textareaClass"?: string;
        "value"?: string;
    }
    interface TiThumbnail {
        "cols"?: number;
        "disabled"?: boolean;
        "extClass"?: string;
        "extCss": string;
        "extThumClass"?: string;
        "extThumImageClass"?: string;
        "extThumOtherClass"?: string;
        "extThumTipClass"?: string;
        "extThumVideoClass"?: string;
        "fileType": string;
        "name": string;
        "path": string;
        "progress": number;
        "size"?: 'small' | 'large';
        "status": `${UploadStatus}`;
        "tip"?: string;
        "uploadExercise"?: `${UploadLoadComponentType}`;
        "uploadExerciseText"?: string;
        "uploadFailText"?: string;
    }
    interface TiTitlebar {
        "extClass": string;
        "extCss": string;
        "extLeftClass"?: string;
        "extLeftIconClass"?: string;
        "extMainTitleClass"?: string;
        "extRightClass"?: string;
        "extRightIconClass"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "extSubTitleClass"?: string;
        "extTitleClass"?: string;
        "leftIcon"?: string;
        "leftText"?: string;
        "rightIcon"?: string;
        "rightText"?: string;
        "subTitle"?: string;
        "title": string;
        "useContainer"?: boolean;
        "useLeft"?: boolean;
        "useLeftSlot"?: boolean;
        "useRight"?: boolean;
        "useRightSlot"?: boolean;
        "useTitle"?: boolean;
        "useTitleSlot"?: boolean;
    }
    interface TiToast {
        /**
          * 用户关闭
         */
        "clear": () => Promise<void>;
        "extContentStyle": string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "extCss": string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "extTextClass": string;
        "fail": (opts: IToastStaticOptions | IToastText) => Promise<void>;
        "info": (opts: IToastStaticOptions | IToastText) => Promise<void>;
        "loading": (opts: IToastStaticOptions | IToastText) => Promise<void>;
        "show": (opts: IToastStaticOptions | IToastText) => Promise<void>;
        "success": (opts: IToastStaticOptions | IToastText) => Promise<void>;
        "timeout"?: number | Timeout;
        "transition"?: TransitionName;
        "warn": (opts: IToastStaticOptions | IToastText) => Promise<void>;
        "zIndex": number;
    }
    interface TiTooltip {
        "closeOnClick": boolean;
        "content": string;
        "direction": string;
        "extClass"?: string;
        "extContentClass"?: string;
        "extCss": string;
        "extInnerClass"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "visible"?: boolean;
    }
    interface TiTransition {
        "destroyOnExit": boolean;
        "enterActiveClass": string;
        "enterClass": string;
        "enterDoneClass": string;
        "enterName": string;
        "exitActiveClass": string;
        "exitClass": string;
        "exitDoneClass": string;
        "exitName": string;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass": string;
        "extCss": string;
        /**
          * 额外的样式
         */
        "extStyle": {};
        "name": TransitionName;
        "show": boolean;
        "timeout": Timeout1 | number;
        "timingFunction": string;
    }
    interface TiTreeSelect {
        "activeValue"?: string[];
        "alias"?: Record<string, string>;
        "defaultIndex"?: number;
        "disabledValue"?: unknown[];
        "extClass"?: string;
        "extCss": string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "height": string | number;
        "icon"?: string;
        "maxCount"?: number;
        "options"?: TreeOption[];
    }
    interface TiUploader {
        "accept"?: string;
        "afterChoose"?: (chooseFileList: UploadFileExternal[], fileList: UploadFileExternal[]) => UploadFileExternal[];
        "afterUpload"?: (
    uploader: TiUploader,
    file: UploadFileExternal,
    fileMap: { [key: string]: UploadFileExternal },
  ) => Partial<UploadFileExternal>;
        "beforeChoose"?: BeforeChooseType;
        "beforeUpload"?: (params: Params, file: UploadFileExternal, list: UploadFileExternal[]) => Params;
        "camera"?: `${UploadCamera}`;
        "choose"?: (list: UploadFile[]) => Promise<UploadFileExternal[]>;
        "chooseIcon"?: string;
        "chooseText"?: string;
        "cols"?: number;
        "complete"?: (file: UploadFileExternal, list: UploadFileExternal[], action: string) => void;
        "count"?: number;
        "defaultValue"?: UploadFileParams[];
        "disabled"?: boolean;
        "extActionClass"?: string;
        "extClass"?: string;
        "extCss": string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "extThumBoxClass"?: string;
        "extThumClass"?: string;
        "extThumImageClass"?: string;
        "extThumOtherClass"?: string;
        "extThumTipClass"?: string;
        "extThumVideoClass"?: string;
        "fileParams"?: { [key: string]: unknown };
        "fileResultFormat"?: (string | number)[];
        "imageParams"?: { [key: string]: unknown };
        "imageResultFormat"?: (string | number)[];
        "immediately"?: boolean;
        "immediatelyChoose"?: boolean;
        "maxSize"?: number;
        "onSelect": () => Promise<void>;
        "preview"?: (file: UploadFileExternal, list: UploadFile[]) => void;
        "size"?: 'small' | 'large';
        "sourceType"?: ('album' | 'camera')[];
        "submit": () => Promise<void>;
        "upload"?: (uploader: TiUploader, key: string) => void;
        "uploadExercise"?: `${UploadLoadComponentType}`;
        "url"?: string;
        "value": unknown;
        "videoParams"?: { [key: string]: unknown };
        "videoResultFormat"?: (string | number)[];
    }
    interface TiVirtualList {
        "containerHeight": number;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass": string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "itemHeight": number;
        "setListData": (listData: any[]) => Promise<void>;
        "setRenderItem": (renderItem: (item: any) => Element | string) => Promise<void>;
    }
}
export interface TiActionSheetCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiActionSheetElement;
}
export interface TiCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiCalendarElement;
}
export interface TiCascadeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiCascadeElement;
}
export interface TiCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiCheckboxElement;
}
export interface TiCheckboxButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiCheckboxButtonElement;
}
export interface TiCheckboxGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiCheckboxGroupElement;
}
export interface TiChooseCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiChooseElement;
}
export interface TiCollapseCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiCollapseElement;
}
export interface TiCountdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiCountdownElement;
}
export interface TiDatetimePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiDatetimePickerElement;
}
export interface TiDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiDialogElement;
}
export interface TiDropdownItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiDropdownItemElement;
}
export interface TiGoodsCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiGoodsCardElement;
}
export interface TiImageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiImageElement;
}
export interface TiInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiInputElement;
}
export interface TiInputNumberCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiInputNumberElement;
}
export interface TiNavbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiNavbarElement;
}
export interface TiPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiPickerElement;
}
export interface TiPickerColumnCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiPickerColumnElement;
}
export interface TiPopupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiPopupElement;
}
export interface TiPopupTitlebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiPopupTitlebarElement;
}
export interface TiPreviewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiPreviewElement;
}
export interface TiRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiRadioElement;
}
export interface TiRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiRadioButtonElement;
}
export interface TiRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiRadioGroupElement;
}
export interface TiRateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiRateElement;
}
export interface TiScrollViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiScrollViewElement;
}
export interface TiSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiSearchElement;
}
export interface TiShareSheetCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiShareSheetElement;
}
export interface TiSidebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiSidebarElement;
}
export interface TiSkuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiSkuElement;
}
export interface TiSkuSelectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiSkuSelectorElement;
}
export interface TiSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiSliderElement;
}
export interface TiStickyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiStickyElement;
}
export interface TiSvgPathViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiSvgPathViewElement;
}
export interface TiSwipeCellCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiSwipeCellElement;
}
export interface TiSwiperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiSwiperElement;
}
export interface TiSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiSwitchElement;
}
export interface TiTabbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiTabbarElement;
}
export interface TiTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiTabsElement;
}
export interface TiTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiTextareaElement;
}
export interface TiThumbnailCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiThumbnailElement;
}
export interface TiTitlebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiTitlebarElement;
}
export interface TiToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiToastElement;
}
export interface TiTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiTooltipElement;
}
export interface TiTransitionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiTransitionElement;
}
export interface TiTreeSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiTreeSelectElement;
}
export interface TiUploaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiUploaderElement;
}
export interface TiVirtualListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTiVirtualListElement;
}
declare global {
    interface HTMLTestContainerElement extends Components.TestContainer, HTMLStencilElement {
    }
    var HTMLTestContainerElement: {
        prototype: HTMLTestContainerElement;
        new (): HTMLTestContainerElement;
    };
    interface HTMLTiActionSheetElement extends Components.TiActionSheet, HTMLStencilElement {
    }
    var HTMLTiActionSheetElement: {
        prototype: HTMLTiActionSheetElement;
        new (): HTMLTiActionSheetElement;
    };
    interface HTMLTiBackTopElement extends Components.TiBackTop, HTMLStencilElement {
    }
    var HTMLTiBackTopElement: {
        prototype: HTMLTiBackTopElement;
        new (): HTMLTiBackTopElement;
    };
    interface HTMLTiBadgeElement extends Components.TiBadge, HTMLStencilElement {
    }
    var HTMLTiBadgeElement: {
        prototype: HTMLTiBadgeElement;
        new (): HTMLTiBadgeElement;
    };
    interface HTMLTiButtonElement extends Components.TiButton, HTMLStencilElement {
    }
    var HTMLTiButtonElement: {
        prototype: HTMLTiButtonElement;
        new (): HTMLTiButtonElement;
    };
    interface HTMLTiCalendarElement extends Components.TiCalendar, HTMLStencilElement {
    }
    var HTMLTiCalendarElement: {
        prototype: HTMLTiCalendarElement;
        new (): HTMLTiCalendarElement;
    };
    interface HTMLTiCascadeElement extends Components.TiCascade, HTMLStencilElement {
    }
    var HTMLTiCascadeElement: {
        prototype: HTMLTiCascadeElement;
        new (): HTMLTiCascadeElement;
    };
    interface HTMLTiCellElement extends Components.TiCell, HTMLStencilElement {
    }
    var HTMLTiCellElement: {
        prototype: HTMLTiCellElement;
        new (): HTMLTiCellElement;
    };
    interface HTMLTiCellGroupElement extends Components.TiCellGroup, HTMLStencilElement {
    }
    var HTMLTiCellGroupElement: {
        prototype: HTMLTiCellGroupElement;
        new (): HTMLTiCellGroupElement;
    };
    interface HTMLTiCheckboxElement extends Components.TiCheckbox, HTMLStencilElement {
    }
    var HTMLTiCheckboxElement: {
        prototype: HTMLTiCheckboxElement;
        new (): HTMLTiCheckboxElement;
    };
    interface HTMLTiCheckboxButtonElement extends Components.TiCheckboxButton, HTMLStencilElement {
    }
    var HTMLTiCheckboxButtonElement: {
        prototype: HTMLTiCheckboxButtonElement;
        new (): HTMLTiCheckboxButtonElement;
    };
    interface HTMLTiCheckboxGroupElement extends Components.TiCheckboxGroup, HTMLStencilElement {
    }
    var HTMLTiCheckboxGroupElement: {
        prototype: HTMLTiCheckboxGroupElement;
        new (): HTMLTiCheckboxGroupElement;
    };
    interface HTMLTiChooseElement extends Components.TiChoose, HTMLStencilElement {
    }
    var HTMLTiChooseElement: {
        prototype: HTMLTiChooseElement;
        new (): HTMLTiChooseElement;
    };
    interface HTMLTiCircleProgressElement extends Components.TiCircleProgress, HTMLStencilElement {
    }
    var HTMLTiCircleProgressElement: {
        prototype: HTMLTiCircleProgressElement;
        new (): HTMLTiCircleProgressElement;
    };
    interface HTMLTiColElement extends Components.TiCol, HTMLStencilElement {
    }
    var HTMLTiColElement: {
        prototype: HTMLTiColElement;
        new (): HTMLTiColElement;
    };
    interface HTMLTiCollapseElement extends Components.TiCollapse, HTMLStencilElement {
    }
    var HTMLTiCollapseElement: {
        prototype: HTMLTiCollapseElement;
        new (): HTMLTiCollapseElement;
    };
    interface HTMLTiCollapseItemElement extends Components.TiCollapseItem, HTMLStencilElement {
    }
    var HTMLTiCollapseItemElement: {
        prototype: HTMLTiCollapseItemElement;
        new (): HTMLTiCollapseItemElement;
    };
    interface HTMLTiConfigProviderElement extends Components.TiConfigProvider, HTMLStencilElement {
    }
    var HTMLTiConfigProviderElement: {
        prototype: HTMLTiConfigProviderElement;
        new (): HTMLTiConfigProviderElement;
    };
    interface HTMLTiCountdownElement extends Components.TiCountdown, HTMLStencilElement {
    }
    var HTMLTiCountdownElement: {
        prototype: HTMLTiCountdownElement;
        new (): HTMLTiCountdownElement;
    };
    interface HTMLTiDatetimePickerElement extends Components.TiDatetimePicker, HTMLStencilElement {
    }
    var HTMLTiDatetimePickerElement: {
        prototype: HTMLTiDatetimePickerElement;
        new (): HTMLTiDatetimePickerElement;
    };
    interface HTMLTiDialogElement extends Components.TiDialog, HTMLStencilElement {
    }
    var HTMLTiDialogElement: {
        prototype: HTMLTiDialogElement;
        new (): HTMLTiDialogElement;
    };
    interface HTMLTiDividerElement extends Components.TiDivider, HTMLStencilElement {
    }
    var HTMLTiDividerElement: {
        prototype: HTMLTiDividerElement;
        new (): HTMLTiDividerElement;
    };
    interface HTMLTiDropdownItemElement extends Components.TiDropdownItem, HTMLStencilElement {
    }
    var HTMLTiDropdownItemElement: {
        prototype: HTMLTiDropdownItemElement;
        new (): HTMLTiDropdownItemElement;
    };
    interface HTMLTiDropdownMenuElement extends Components.TiDropdownMenu, HTMLStencilElement {
    }
    var HTMLTiDropdownMenuElement: {
        prototype: HTMLTiDropdownMenuElement;
        new (): HTMLTiDropdownMenuElement;
    };
    interface HTMLTiEmptyElement extends Components.TiEmpty, HTMLStencilElement {
    }
    var HTMLTiEmptyElement: {
        prototype: HTMLTiEmptyElement;
        new (): HTMLTiEmptyElement;
    };
    interface HTMLTiGoodsCardElement extends Components.TiGoodsCard, HTMLStencilElement {
    }
    var HTMLTiGoodsCardElement: {
        prototype: HTMLTiGoodsCardElement;
        new (): HTMLTiGoodsCardElement;
    };
    interface HTMLTiGridElement extends Components.TiGrid, HTMLStencilElement {
    }
    var HTMLTiGridElement: {
        prototype: HTMLTiGridElement;
        new (): HTMLTiGridElement;
    };
    interface HTMLTiGridItemElement extends Components.TiGridItem, HTMLStencilElement {
    }
    var HTMLTiGridItemElement: {
        prototype: HTMLTiGridItemElement;
        new (): HTMLTiGridItemElement;
    };
    interface HTMLTiIconElement extends Components.TiIcon, HTMLStencilElement {
    }
    var HTMLTiIconElement: {
        prototype: HTMLTiIconElement;
        new (): HTMLTiIconElement;
    };
    interface HTMLTiImageElement extends Components.TiImage, HTMLStencilElement {
    }
    var HTMLTiImageElement: {
        prototype: HTMLTiImageElement;
        new (): HTMLTiImageElement;
    };
    interface HTMLTiInputElement extends Components.TiInput, HTMLStencilElement {
    }
    var HTMLTiInputElement: {
        prototype: HTMLTiInputElement;
        new (): HTMLTiInputElement;
    };
    interface HTMLTiInputNumberElement extends Components.TiInputNumber, HTMLStencilElement {
    }
    var HTMLTiInputNumberElement: {
        prototype: HTMLTiInputNumberElement;
        new (): HTMLTiInputNumberElement;
    };
    interface HTMLTiLoadingElement extends Components.TiLoading, HTMLStencilElement {
    }
    var HTMLTiLoadingElement: {
        prototype: HTMLTiLoadingElement;
        new (): HTMLTiLoadingElement;
    };
    interface HTMLTiNavbarElement extends Components.TiNavbar, HTMLStencilElement {
    }
    var HTMLTiNavbarElement: {
        prototype: HTMLTiNavbarElement;
        new (): HTMLTiNavbarElement;
    };
    interface HTMLTiNoticeBarElement extends Components.TiNoticeBar, HTMLStencilElement {
    }
    var HTMLTiNoticeBarElement: {
        prototype: HTMLTiNoticeBarElement;
        new (): HTMLTiNoticeBarElement;
    };
    interface HTMLTiPickerElement extends Components.TiPicker, HTMLStencilElement {
    }
    var HTMLTiPickerElement: {
        prototype: HTMLTiPickerElement;
        new (): HTMLTiPickerElement;
    };
    interface HTMLTiPickerColumnElement extends Components.TiPickerColumn, HTMLStencilElement {
    }
    var HTMLTiPickerColumnElement: {
        prototype: HTMLTiPickerColumnElement;
        new (): HTMLTiPickerColumnElement;
    };
    interface HTMLTiPopupElement extends Components.TiPopup, HTMLStencilElement {
    }
    var HTMLTiPopupElement: {
        prototype: HTMLTiPopupElement;
        new (): HTMLTiPopupElement;
    };
    interface HTMLTiPopupTitlebarElement extends Components.TiPopupTitlebar, HTMLStencilElement {
    }
    var HTMLTiPopupTitlebarElement: {
        prototype: HTMLTiPopupTitlebarElement;
        new (): HTMLTiPopupTitlebarElement;
    };
    interface HTMLTiPortalElement extends Components.TiPortal, HTMLStencilElement {
    }
    var HTMLTiPortalElement: {
        prototype: HTMLTiPortalElement;
        new (): HTMLTiPortalElement;
    };
    interface HTMLTiPreviewElement extends Components.TiPreview, HTMLStencilElement {
    }
    var HTMLTiPreviewElement: {
        prototype: HTMLTiPreviewElement;
        new (): HTMLTiPreviewElement;
    };
    interface HTMLTiPriceElement extends Components.TiPrice, HTMLStencilElement {
    }
    var HTMLTiPriceElement: {
        prototype: HTMLTiPriceElement;
        new (): HTMLTiPriceElement;
    };
    interface HTMLTiProgressElement extends Components.TiProgress, HTMLStencilElement {
    }
    var HTMLTiProgressElement: {
        prototype: HTMLTiProgressElement;
        new (): HTMLTiProgressElement;
    };
    interface HTMLTiRadioElement extends Components.TiRadio, HTMLStencilElement {
    }
    var HTMLTiRadioElement: {
        prototype: HTMLTiRadioElement;
        new (): HTMLTiRadioElement;
    };
    interface HTMLTiRadioButtonElement extends Components.TiRadioButton, HTMLStencilElement {
    }
    var HTMLTiRadioButtonElement: {
        prototype: HTMLTiRadioButtonElement;
        new (): HTMLTiRadioButtonElement;
    };
    interface HTMLTiRadioGroupElement extends Components.TiRadioGroup, HTMLStencilElement {
    }
    var HTMLTiRadioGroupElement: {
        prototype: HTMLTiRadioGroupElement;
        new (): HTMLTiRadioGroupElement;
    };
    interface HTMLTiRateElement extends Components.TiRate, HTMLStencilElement {
    }
    var HTMLTiRateElement: {
        prototype: HTMLTiRateElement;
        new (): HTMLTiRateElement;
    };
    interface HTMLTiRowElement extends Components.TiRow, HTMLStencilElement {
    }
    var HTMLTiRowElement: {
        prototype: HTMLTiRowElement;
        new (): HTMLTiRowElement;
    };
    interface HTMLTiSafeAreaElement extends Components.TiSafeArea, HTMLStencilElement {
    }
    var HTMLTiSafeAreaElement: {
        prototype: HTMLTiSafeAreaElement;
        new (): HTMLTiSafeAreaElement;
    };
    interface HTMLTiScrollViewElement extends Components.TiScrollView, HTMLStencilElement {
    }
    var HTMLTiScrollViewElement: {
        prototype: HTMLTiScrollViewElement;
        new (): HTMLTiScrollViewElement;
    };
    interface HTMLTiSearchElement extends Components.TiSearch, HTMLStencilElement {
    }
    var HTMLTiSearchElement: {
        prototype: HTMLTiSearchElement;
        new (): HTMLTiSearchElement;
    };
    interface HTMLTiShareSheetElement extends Components.TiShareSheet, HTMLStencilElement {
    }
    var HTMLTiShareSheetElement: {
        prototype: HTMLTiShareSheetElement;
        new (): HTMLTiShareSheetElement;
    };
    interface HTMLTiSidebarElement extends Components.TiSidebar, HTMLStencilElement {
    }
    var HTMLTiSidebarElement: {
        prototype: HTMLTiSidebarElement;
        new (): HTMLTiSidebarElement;
    };
    interface HTMLTiSidebarItemElement extends Components.TiSidebarItem, HTMLStencilElement {
    }
    var HTMLTiSidebarItemElement: {
        prototype: HTMLTiSidebarItemElement;
        new (): HTMLTiSidebarItemElement;
    };
    interface HTMLTiSkuElement extends Components.TiSku, HTMLStencilElement {
    }
    var HTMLTiSkuElement: {
        prototype: HTMLTiSkuElement;
        new (): HTMLTiSkuElement;
    };
    interface HTMLTiSkuSelectorElement extends Components.TiSkuSelector, HTMLStencilElement {
    }
    var HTMLTiSkuSelectorElement: {
        prototype: HTMLTiSkuSelectorElement;
        new (): HTMLTiSkuSelectorElement;
    };
    interface HTMLTiSliderElement extends Components.TiSlider, HTMLStencilElement {
    }
    var HTMLTiSliderElement: {
        prototype: HTMLTiSliderElement;
        new (): HTMLTiSliderElement;
    };
    interface HTMLTiStepsElement extends Components.TiSteps, HTMLStencilElement {
    }
    var HTMLTiStepsElement: {
        prototype: HTMLTiStepsElement;
        new (): HTMLTiStepsElement;
    };
    interface HTMLTiStickyElement extends Components.TiSticky, HTMLStencilElement {
    }
    var HTMLTiStickyElement: {
        prototype: HTMLTiStickyElement;
        new (): HTMLTiStickyElement;
    };
    interface HTMLTiSvgPathViewElement extends Components.TiSvgPathView, HTMLStencilElement {
    }
    var HTMLTiSvgPathViewElement: {
        prototype: HTMLTiSvgPathViewElement;
        new (): HTMLTiSvgPathViewElement;
    };
    interface HTMLTiSwipeCellElement extends Components.TiSwipeCell, HTMLStencilElement {
    }
    var HTMLTiSwipeCellElement: {
        prototype: HTMLTiSwipeCellElement;
        new (): HTMLTiSwipeCellElement;
    };
    interface HTMLTiSwiperElement extends Components.TiSwiper, HTMLStencilElement {
    }
    var HTMLTiSwiperElement: {
        prototype: HTMLTiSwiperElement;
        new (): HTMLTiSwiperElement;
    };
    interface HTMLTiSwiperItemElement extends Components.TiSwiperItem, HTMLStencilElement {
    }
    var HTMLTiSwiperItemElement: {
        prototype: HTMLTiSwiperItemElement;
        new (): HTMLTiSwiperItemElement;
    };
    interface HTMLTiSwitchElement extends Components.TiSwitch, HTMLStencilElement {
    }
    var HTMLTiSwitchElement: {
        prototype: HTMLTiSwitchElement;
        new (): HTMLTiSwitchElement;
    };
    interface HTMLTiTabbarElement extends Components.TiTabbar, HTMLStencilElement {
    }
    var HTMLTiTabbarElement: {
        prototype: HTMLTiTabbarElement;
        new (): HTMLTiTabbarElement;
    };
    interface HTMLTiTabbarItemElement extends Components.TiTabbarItem, HTMLStencilElement {
    }
    var HTMLTiTabbarItemElement: {
        prototype: HTMLTiTabbarItemElement;
        new (): HTMLTiTabbarItemElement;
    };
    interface HTMLTiTabsElement extends Components.TiTabs, HTMLStencilElement {
    }
    var HTMLTiTabsElement: {
        prototype: HTMLTiTabsElement;
        new (): HTMLTiTabsElement;
    };
    interface HTMLTiTagElement extends Components.TiTag, HTMLStencilElement {
    }
    var HTMLTiTagElement: {
        prototype: HTMLTiTagElement;
        new (): HTMLTiTagElement;
    };
    interface HTMLTiTextareaElement extends Components.TiTextarea, HTMLStencilElement {
    }
    var HTMLTiTextareaElement: {
        prototype: HTMLTiTextareaElement;
        new (): HTMLTiTextareaElement;
    };
    interface HTMLTiThumbnailElement extends Components.TiThumbnail, HTMLStencilElement {
    }
    var HTMLTiThumbnailElement: {
        prototype: HTMLTiThumbnailElement;
        new (): HTMLTiThumbnailElement;
    };
    interface HTMLTiTitlebarElement extends Components.TiTitlebar, HTMLStencilElement {
    }
    var HTMLTiTitlebarElement: {
        prototype: HTMLTiTitlebarElement;
        new (): HTMLTiTitlebarElement;
    };
    interface HTMLTiToastElement extends Components.TiToast, HTMLStencilElement {
    }
    var HTMLTiToastElement: {
        prototype: HTMLTiToastElement;
        new (): HTMLTiToastElement;
    };
    interface HTMLTiTooltipElement extends Components.TiTooltip, HTMLStencilElement {
    }
    var HTMLTiTooltipElement: {
        prototype: HTMLTiTooltipElement;
        new (): HTMLTiTooltipElement;
    };
    interface HTMLTiTransitionElement extends Components.TiTransition, HTMLStencilElement {
    }
    var HTMLTiTransitionElement: {
        prototype: HTMLTiTransitionElement;
        new (): HTMLTiTransitionElement;
    };
    interface HTMLTiTreeSelectElement extends Components.TiTreeSelect, HTMLStencilElement {
    }
    var HTMLTiTreeSelectElement: {
        prototype: HTMLTiTreeSelectElement;
        new (): HTMLTiTreeSelectElement;
    };
    interface HTMLTiUploaderElement extends Components.TiUploader, HTMLStencilElement {
    }
    var HTMLTiUploaderElement: {
        prototype: HTMLTiUploaderElement;
        new (): HTMLTiUploaderElement;
    };
    interface HTMLTiVirtualListElement extends Components.TiVirtualList, HTMLStencilElement {
    }
    var HTMLTiVirtualListElement: {
        prototype: HTMLTiVirtualListElement;
        new (): HTMLTiVirtualListElement;
    };
    interface HTMLElementTagNameMap {
        "test-container": HTMLTestContainerElement;
        "ti-action-sheet": HTMLTiActionSheetElement;
        "ti-back-top": HTMLTiBackTopElement;
        "ti-badge": HTMLTiBadgeElement;
        "ti-button": HTMLTiButtonElement;
        "ti-calendar": HTMLTiCalendarElement;
        "ti-cascade": HTMLTiCascadeElement;
        "ti-cell": HTMLTiCellElement;
        "ti-cell-group": HTMLTiCellGroupElement;
        "ti-checkbox": HTMLTiCheckboxElement;
        "ti-checkbox-button": HTMLTiCheckboxButtonElement;
        "ti-checkbox-group": HTMLTiCheckboxGroupElement;
        "ti-choose": HTMLTiChooseElement;
        "ti-circle-progress": HTMLTiCircleProgressElement;
        "ti-col": HTMLTiColElement;
        "ti-collapse": HTMLTiCollapseElement;
        "ti-collapse-item": HTMLTiCollapseItemElement;
        "ti-config-provider": HTMLTiConfigProviderElement;
        "ti-countdown": HTMLTiCountdownElement;
        "ti-datetime-picker": HTMLTiDatetimePickerElement;
        "ti-dialog": HTMLTiDialogElement;
        "ti-divider": HTMLTiDividerElement;
        "ti-dropdown-item": HTMLTiDropdownItemElement;
        "ti-dropdown-menu": HTMLTiDropdownMenuElement;
        "ti-empty": HTMLTiEmptyElement;
        "ti-goods-card": HTMLTiGoodsCardElement;
        "ti-grid": HTMLTiGridElement;
        "ti-grid-item": HTMLTiGridItemElement;
        "ti-icon": HTMLTiIconElement;
        "ti-image": HTMLTiImageElement;
        "ti-input": HTMLTiInputElement;
        "ti-input-number": HTMLTiInputNumberElement;
        "ti-loading": HTMLTiLoadingElement;
        "ti-navbar": HTMLTiNavbarElement;
        "ti-notice-bar": HTMLTiNoticeBarElement;
        "ti-picker": HTMLTiPickerElement;
        "ti-picker-column": HTMLTiPickerColumnElement;
        "ti-popup": HTMLTiPopupElement;
        "ti-popup-titlebar": HTMLTiPopupTitlebarElement;
        "ti-portal": HTMLTiPortalElement;
        "ti-preview": HTMLTiPreviewElement;
        "ti-price": HTMLTiPriceElement;
        "ti-progress": HTMLTiProgressElement;
        "ti-radio": HTMLTiRadioElement;
        "ti-radio-button": HTMLTiRadioButtonElement;
        "ti-radio-group": HTMLTiRadioGroupElement;
        "ti-rate": HTMLTiRateElement;
        "ti-row": HTMLTiRowElement;
        "ti-safe-area": HTMLTiSafeAreaElement;
        "ti-scroll-view": HTMLTiScrollViewElement;
        "ti-search": HTMLTiSearchElement;
        "ti-share-sheet": HTMLTiShareSheetElement;
        "ti-sidebar": HTMLTiSidebarElement;
        "ti-sidebar-item": HTMLTiSidebarItemElement;
        "ti-sku": HTMLTiSkuElement;
        "ti-sku-selector": HTMLTiSkuSelectorElement;
        "ti-slider": HTMLTiSliderElement;
        "ti-steps": HTMLTiStepsElement;
        "ti-sticky": HTMLTiStickyElement;
        "ti-svg-path-view": HTMLTiSvgPathViewElement;
        "ti-swipe-cell": HTMLTiSwipeCellElement;
        "ti-swiper": HTMLTiSwiperElement;
        "ti-swiper-item": HTMLTiSwiperItemElement;
        "ti-switch": HTMLTiSwitchElement;
        "ti-tabbar": HTMLTiTabbarElement;
        "ti-tabbar-item": HTMLTiTabbarItemElement;
        "ti-tabs": HTMLTiTabsElement;
        "ti-tag": HTMLTiTagElement;
        "ti-textarea": HTMLTiTextareaElement;
        "ti-thumbnail": HTMLTiThumbnailElement;
        "ti-titlebar": HTMLTiTitlebarElement;
        "ti-toast": HTMLTiToastElement;
        "ti-tooltip": HTMLTiTooltipElement;
        "ti-transition": HTMLTiTransitionElement;
        "ti-tree-select": HTMLTiTreeSelectElement;
        "ti-uploader": HTMLTiUploaderElement;
        "ti-virtual-list": HTMLTiVirtualListElement;
    }
}
declare namespace LocalJSX {
    interface TestContainer {
    }
    interface TiActionSheet {
        "actions"?: ActionItem[];
        "alias"?: { [x: string]: string };
        "cancelText"?: string;
        "hoverClass"?: string;
        "onCancel"?: (event: TiActionSheetCustomEvent<never>) => void;
        "onClose"?: (event: TiActionSheetCustomEvent<never>) => void;
        "onSelect"?: (event: TiActionSheetCustomEvent<ActionItem>) => void;
        "title"?: string;
        "visible"?: boolean;
    }
    interface TiBackTop {
        /**
          * 滚动到顶部时间（ms）
          * @type number
          * @default 300
          * @example <TiBackTop duration={300} />
          * @since 0.1.0
          * @memberOf BackTopProps
         */
        "duration"?: number;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: any;
        "extCss"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "scrollDuration"?: number;
        /**
          * 设置需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数
          * @type {() => HTMLElement}
          * @default Document
          * @example <TiBackTop target={() => window} />
          * @memberOf BackTopProps
         */
        "target"?: () => HTMLElement | Window | Document;
        /**
          * 展示文字
          * @type string
          * @default ''
          * @example <TiBackTop text="返回顶部" />
          * @since 0.1.0
          * @memberOf BackTopProps
         */
        "text"?: string;
        /**
          * 滚动距顶部指定距离后展示
          * @type number
          * @default 400
          * @example <TiBackTop visibilityHeight={100} />
          * @since 0.1.0
          * @memberOf BackTopProps
         */
        "visibilityHeight"?: number;
    }
    interface TiBadge {
        "atText"?: boolean;
        "content"?: string | number;
        "dot"?: boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "icon"?: string;
        "offset"?: any[];
        "spread"?: ValueOf<typeof EBadgeSpread>;
        "static"?: boolean;
        "useSlot"?: boolean;
    }
    interface TiButton {
        "block"?: boolean;
        "buttonInnerClass"?: string;
        "color"?: string;
        "disabled"?: boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "hairline"?: boolean;
        "loading"?: boolean;
        "loadingClass"?: string;
        "loadingSize"?: number;
        "loadingText"?: string;
        "loadingType"?: 'circular' | 'spinner';
        "prefixIcon"?: string;
        "prefixIconClass"?: string;
        "shape"?: string;
        "size"?: string;
        "suffixIcon"?: string;
        "suffixIconClass"?: string;
        "type"?: string;
        "variant"?: string;
    }
    interface TiCalendar {
        "allowSameDay"?: boolean;
        "closeOnMask"?: boolean;
        "color"?: string;
        "confirmText"?: string;
        "contentZIndex"?: number;
        "defaultValue"?: CalDateTimeType[] | CalDateTimeType | null;
        "destroyOnClose"?: boolean;
        "disableGlobalTouchMove"?: boolean;
        "extClass"?: string;
        "extCss"?: string;
        "extPopupClass"?: string;
        "extPopupContentClass"?: string;
        "extPopupMaskClass"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "formatter"?: (date: CalRenderDateProps) => CalRenderDateProps;
        "maskZIndex"?: number;
        "maxDate"?: number;
        "maxRange"?: number;
        "maxSize"?: number;
        "minDate"?: number;
        "mode"?: `${CalTypeEnum}`;
        "onClose"?: (event: TiCalendarCustomEvent<any>) => void;
        "onConfirm"?: (event: TiCalendarCustomEvent<CalRenderDateProps[]>) => void;
        "onError"?: (event: TiCalendarCustomEvent<{
    error: CalErrorProps;
    date: CalDateProps;
    currentDate: CalRenderDateProps[];
  }>) => void;
        "onSelect"?: (event: TiCalendarCustomEvent<{
    date: CalDateProps;
    currentDate: CalRenderDateProps[];
  }>) => void;
        "position"?: HTMLTiPopupElement['position'];
        "round"?: boolean;
        "start"?: string;
        "title"?: string;
        "usePopup"?: boolean;
        "value"?: CalDateTimeType[] | CalDateTimeType | null;
        "visible"?: boolean;
    }
    interface TiCascade {
        "active"?: number;
        "cascade"?: string;
        "code"?: string;
        "extHeaderStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "extOptionItemStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "extTabStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "getOptions"?: CascadeFn;
        "label"?: string;
        "onChange"?: (event: TiCascadeCustomEvent<{
    value: unknown[];
    options: CascadeOption[];
    active: number;
  }>) => void;
        "onChangeSwiper"?: (event: TiCascadeCustomEvent<{
    current: number;
    source: 'touch' | '';
  }>) => void;
        "onClose"?: (event: TiCascadeCustomEvent<void>) => void;
        "options"?: { [key: string | number]: unknown }[];
        "tabs"?: string[];
        "title"?: string;
        "titlebar"?: boolean;
        "value"?: unknown[];
    }
    interface TiCell {
        /**
          * 内容块的横向排列方式
          * @type string
          * @default center
          * @example <TiCell alignItems="center" />
          * @since 0.1.0
         */
        "alignItems"?: 'center' | 'flex-start' | 'flex-end' | 'baseline' | 'stretch' | 'start' | 'end';
        /**
          * 是否显示右侧箭头
          * @type boolean
          * @default true
          * @example <TiCell arrow="{{false}}" />
          * @since 0.1.0
         */
        "arrow"?: boolean;
        /**
          * 是否开启点击反馈
          * @type boolean
          * @default true
          * @example <TiCell clickable />
          * @since 0.1.0
         */
        "clickable"?: boolean;
        /**
          * 图标颜色
          * @type string
          * @default ''
          * @example <TiCell color="red" />
          * @since 0.1.0
         */
        "color"?: string;
        /**
          * 副标题，右侧描述信息
          * @type string
          * @default ''
          * @example <TiCell title="标题" desc="副标题" />
          * @since 0.1.0
         */
        "desc"?: string;
        "descClass"?: string;
        /**
          * 是否禁用单元格
          * @type boolean
          * @default false
          * @example <TiCell title="标题" disabled />
          * @since 0.1.0
         */
        "disabled"?: boolean;
        /**
          * 是否显示分割线
          * @type boolean
          * @default true
          * @example <TiCell divider={false} title="没有分割线" />
          * @since 0.1.0
         */
        "divider"?: boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        /**
          * 图标
          * @type string
          * @default ''
          * @example <TiCell title="标题" icon="home" />
          * @since 0.1.0
         */
        "icon"?: string;
        /**
          * 右侧图标的尺寸
          * @type number
          * @default 36
          * @example <TiCell iconSize={36} />
          * @since 0.1.0
         */
        "iconSize"?: string | number;
        /**
          * 标题下面的内容
          * @type string
          * @default ''
          * @example <TiCell title="标题" label="标题下面的内容" />
          * @since 0.1.0
         */
        "label"?: string;
        "labelClass"?: string;
        /**
          * 是否必须选择
          * @type boolean
          * @default false
          * @example <TiCell required />
          * @since 0.1.0
         */
        "required"?: boolean;
        /**
          * 右侧图标
          * @type string
          * @default ''
          * @example <TiCell title="标题" rightIcon="checked" />
          * @since 0.1.0
         */
        "rightIcon"?: string;
        /**
          * 右侧图标的尺寸
          * @type number
          * @default 28
          * @example <TiCell right-icon-size="{{ 28 }}" />
          * @since 0.1.0
         */
        "rightIconSize"?: string | number;
        /**
          * 副标题下面的内容
          * @type string
          * @default ''
          * @example <TiCell subDesc="副标题下面的内容" />
          * @since 0.1.0
         */
        "subDesc"?: string;
        /**
          * 标题
          * @type string
          * @default ''
          * @example <TiCell title="标题" />
          * @since 0.1.0
         */
        "title"?: string | any;
        "titleClass"?: string;
        "titleWidth"?: string;
        "titleWrapClass"?: string;
        "useSubArrow"?: boolean;
    }
    interface TiCellGroup {
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: any;
        "extCss"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        /**
          * 单元格组模式
          * @type string
          * @default default
          * @enum , card
          * @example <TiCellGroup mode="card" />
          * @since 0.1.0
          * @memberOf CellGroupProps
         */
        "mode"?: 'default' | 'card';
        /**
          * 单元格组副标题
          * @type string
          * @default ''
          * @example <TiCellGroup sub-title="单元格组副标题" />
          * @since 0.1.0
          * @memberOf CellGroupProps
         */
        "subTitle"?: string;
        /**
          * 自定义 group sub title 的 part 属性
         */
        "subTitleClass"?: string;
        /**
          * 单元格组副标题
          * @type string
          * @default ''
          * @example <TiCellGroup title="单元格组标题" />
          * @since 0.1.0
          * @memberOf CellGroupProps
         */
        "title"?: string;
        /**
          * 自定义 group title 的 part 属性
         */
        "titleClass"?: string;
        /**
          * 自定义 title wrap 的 part 属性
         */
        "titleWrapClass"?: string;
    }
    interface TiCheckbox {
        /**
          * 指定当前是否选中, 此模式下为控制型组件
          * @type boolean
          * @default false
          * @example <TiCheckbox checked />
          * @since 0.1.0
         */
        "checked"?: boolean | null;
        /**
          * 单选框颜色配置
          * @type string
          * @default ''
          * @example <TiCheckbox color="red" />
          * @since 0.1.0
         */
        "color"?: string;
        /**
          * 初始是否选中, 此模式下为非控制型组件
          * @type boolean
          * @default false
          * @example <TiCheckbox defaultChecked />
          * @since 0.1.0
         */
        "defaultChecked"?: boolean | null;
        /**
          * 指定当前是否禁用
          * @type boolean
          * @default false
          * @example <TiCheckbox disabled />
          * @since 0.1.0
         */
        "disabled"?: boolean | null;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        /**
          * 自定义图标名称
          * @type string
          * @default 'checkbox-hollow'
          * @example <TiCheckbox icon="checkbox" />
          * @since 0.1.0
         */
        "icon"?: string | boolean;
        "iconClass"?: string;
        /**
          * 文字内容
          * @type string
          * @default ''
          * @example <TiCheckbox cancelable />
          * @since 0.1.0
         */
        "label"?: string;
        /**
          * 指定当前文字是否禁用点击
          * @type boolean
          * @default false
          * @example <TiCheckbox labelDisabled />
          * @since 0.1.0
         */
        "labelDisabled"?: boolean | null;
        "onChange"?: (event: TiCheckboxCustomEvent<boolean>) => void;
        /**
          * 单选框圆角度数
          * @type string
          * @default circle
          * @enum , square
          * @example <TiCheckbox shape="square" />
          * @since 0.1.0
         */
        "shape"?: 'square' | 'circle' | 'none' | number;
        /**
          * 自定义图标尺寸
          * @type number
          * @default 32
          * @example <TiCheckbox icon="checkbox" size={32} />
          * @since 0.1.0
         */
        "size"?: number;
        /**
          * 根据 value 进行比较，判断是否选中
          * @type string
          * @default ''
          * @example <TiCheckbox value="1" />
          * @since 0.1.0
         */
        "value"?: number | string;
    }
    interface TiCheckboxButton {
        /**
          * 指定当前是否选中, 此模式下为控制型组件
          * @type boolean
          * @default false
          * @example <TiCheckboxButton checked />
          * @since 0.1.0
         */
        "checked"?: boolean | null;
        /**
          * 单选框颜色配置
          * @type string
          * @default ''
          * @example <TiCheckboxButton color="red" />
          * @since 0.1.0
         */
        "color"?: string;
        /**
          * 初始是否选中, 此模式下为非控制型组件
          * @type boolean
          * @default false
          * @example <TiCheckboxButton defaultChecked />
          * @since 0.1.0
         */
        "defaultChecked"?: boolean | null;
        /**
          * 指定当前是否禁用
          * @type boolean
          * @default false
          * @example <TiCheckboxButton disabled />
          * @since 0.1.0
         */
        "disabled"?: boolean | null;
        "extClass"?: string;
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        /**
          * 自定义图标名称
          * @type string
          * @default 'checkbox-hollow'
          * @example <TiCheckboxButton icon="checkbox" />
          * @since 0.1.0
         */
        "icon"?: string;
        /**
          * 文字内容
          * @type boolean
          * @default false
          * @example <TiCheckboxButton label="文字" />
          * @since 0.1.0
         */
        "label"?: string;
        "leftIcon"?: string;
        "onChange"?: (event: TiCheckboxButtonCustomEvent<boolean>) => void;
        /**
          * 根据 value 进行比较，判断是否选中
          * @type string
          * @default ''
          * @example <TiCheckboxButton value="1" />
          * @since 0.1.0
         */
        "value"?: number | string;
    }
    interface TiCheckboxGroup {
        /**
          * 单选框颜色配置
          * @type string
          * @default ''
          * @example <TiCheckboxGroup color="red" />
          * @since 0.1.0
         */
        "color"?: string;
        /**
          * 默认选中的值
          * @type string
          * @default []
          * @example <TiCheckboxGroup defaultValue={[1]} />
          * @since 0.1.0
         */
        "defaultValue"?: Array<string | number>;
        /**
          * 子组件排列方向
          * @type string
          * @default 'horizontal'
          * @enum 
          * @example <TiCheckboxGroup direction="vertical" />
          * @since 0.1.0
         */
        "direction"?: 'horizontal' | 'vertical';
        /**
          * 指定当前是否禁用
          * @type boolean
          * @default false
          * @example <TiCheckboxGroup disabled />
          * @since 0.1.0
         */
        "disabled"?: any;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        /**
          * 自定义图标名称
          * @type string
          * @default ''
          * @example <TiCheckboxGroup icon="checkbox" />
          * @since 0.1.0
         */
        "icon"?: string;
        /**
          * 指定当前文字是否禁用点击
          * @type boolean
          * @default false
          * @example <TiCheckboxGroup labelDisabled />
          * @since 0.1.0
         */
        "labelDisabled"?: boolean;
        /**
          * 设置当前最多选择的数量
          * @type number
          * @default Infinity
          * @example <TiCheckboxGroup max={2} />
          * @since 0.1.0
         */
        "max"?: number;
        "onChange"?: (event: TiCheckboxGroupCustomEvent<Array<string | number>>) => void;
        "onHandleMax"?: (event: TiCheckboxGroupCustomEvent<never>) => void;
        /**
          * 以配置形式设置子元素
          * @type array
          * @default []
          * @example <TiCheckboxGroup options={ [{value: 'name1', label: 'name1'},{value: 'name2', label: 'name2'},{value: 'name3', label: 'name3'}] }/>
          * @since 0.1.0
         */
        "options"?: CheckboxItem[];
        /**
          * 单选框圆角度数
          * @type string
          * @default circle
          * @enum , square
          * @example <TiCheckboxGroup shape="square" />
          * @since 0.1.0
         */
        "shape"?: 'square' | 'circle' | 'none' | number;
        /**
          * 多选框尺寸
          * @type number
          * @default ''
          * @example <TiCheckboxGroup size={32} />
          * @since 0.1.0
         */
        "size"?: number;
        /**
          * 用于指定当前选中的选项
          * @type string
          * @default ''
          * @example <TiCheckboxGroup value={[1]} />
          * @since 0.1.0
         */
        "value"?: Array<string | number> | string;
    }
    interface TiChoose {
        "accept"?: string;
        "afterChoose"?: (chooseFileList: UploadFileExternal[], fileList: UploadFileExternal[]) => UploadFileExternal[];
        "beforeChoose"?: BeforeChooseType;
        "camera"?: `${UploadCamera}`;
        "choose"?: (list: UploadFile[]) => Promise<UploadFileExternal[]>;
        "chooseIcon"?: string;
        "chooseText"?: string;
        "cols"?: number;
        "count"?: number;
        "disabled"?: boolean;
        "extClass"?: string;
        "fileKeyList": string[];
        "fileMap": Map<string, UploadFile>;
        "immediatelyChoose"?: boolean;
        "maxSize"?: number;
        "onChange"?: (event: TiChooseCustomEvent<UploadFileExternal[]>) => void;
        "onChoose"?: (event: TiChooseCustomEvent<any>) => void;
        "onClickPlus"?: (event: TiChooseCustomEvent<any>) => void;
        "onError"?: (event: TiChooseCustomEvent<{
    status: string;
    message: string;
  }>) => void;
        "pure"?: boolean;
        "size"?: 'small' | 'large';
        "sourceType"?: ('album' | 'camera')[];
    }
    interface TiCircleProgress {
        "buffer"?: number;
        "bufferBgColor"?: string;
        "color"?: string;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        "font"?: string;
        "showProgress"?: boolean;
        "size"?: number;
        "strokeColor"?: string;
        "strokeWidth"?: number;
        "value"?: number;
    }
    interface TiCol {
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        /**
          * 栅格左侧的偏移格数
          * @type number
          * @default 0
          * @example <TiCol span={2} offset={1} />
          * @since 0.1.0
          * @memberOf ColProps
         */
        "offset"?: number;
        /**
          * 栅格占位格数，为 0 时相当于 `display: none`
          * @type number
          * @default 0
          * @example <TiCol span={2} />
          * @since 0.1.0
          * @memberOf ColProps
         */
        "span"?: number;
    }
    interface TiCollapse {
        "clickable"?: boolean;
        "disabled"?: boolean;
        "divider"?: boolean;
        "extCss"?: string;
        "extOptionClass"?: string;
        "extOptionContentClass"?: string;
        "extOptionStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "icon"?: string;
        "onChange"?: (event: TiCollapseCustomEvent<unknown>) => void;
        "onClose"?: (event: TiCollapseCustomEvent<unknown>) => void;
        "onOpen"?: (event: TiCollapseCustomEvent<unknown>) => void;
        "options"?: (OmitType<Components.TiCollapseItem, (...args: any) => any> & { content: string })[] | string;
        "repel"?: boolean;
        "rightIcon"?: string;
        "value"?: string | number | Array<string | number>;
    }
    interface TiCollapseItem {
        "clickable"?: boolean;
        "desc"?: string;
        "disabled"?: boolean;
        "divider"?: boolean;
        "extClass"?: string;
        "extContentClass"?: string;
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "icon"?: string;
        "label"?: string;
        "rightIcon"?: string;
        "title"?: string;
        "useRightIconSlot"?: boolean;
        "value"?: string | number;
    }
    interface TiConfigProvider {
        "enableTitianIcon"?: IStore['enableTitianIcon'];
        "iconClassPrefix"?: IStore['iconClassPrefix'];
        "locale"?: IStore['locale'];
    }
    interface TiCountdown {
        "autoplay"?: boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "format"?: string;
        "onChange"?: (event: TiCountdownCustomEvent<TimeGroup>) => void;
        "onFinish"?: (event: TiCountdownCustomEvent<never>) => void;
        "size"?: 'small' | 'medium' | 'big' | 'large';
        "time"?: number;
        "useSlot"?: boolean;
        "variant"?: 'pure' | 'block' | 'mixture';
    }
    interface TiDatetimePicker {
        "cancelText"?: string;
        "confirmText"?: string;
        "dayUseSelectSlot"?: boolean;
        "extClass"?: string;
        "extHairlineClass"?: string;
        "extMaskClass"?: string;
        "extOptionClass"?: string;
        "extOptionItemClass"?: string;
        "extOptionStyle"?: JSXBase.HTMLAttributes<Record<string, unknown>>['style'] | string;
        "extStyle"?: JSXBase.HTMLAttributes<Record<string, unknown>>['style'] | string;
        "filter"?: (
    type: DateTimePickerColumnEnum,
    values: {
      [x: string]: unknown;
      value: number;
    }[],
    params: { day: unknown; hour: unknown; minute: unknown; year: unknown; month: unknown },
  ) => unknown;
        "formatter"?: (
    type: DateTimePickerColumnEnum,
    value: number,
    params: { day: unknown; hour: unknown; minute: unknown; year: unknown; month: unknown },
  ) => unknown;
        "hourUseSelectSlot"?: boolean;
        "label"?: string;
        "loading"?: boolean;
        "maxDate"?: number;
        "minDate"?: number;
        "minuteUseSelectSlot"?: boolean;
        "monthUseSelectSlot"?: boolean;
        "onCancel"?: (event: TiDatetimePickerCustomEvent<unknown>) => void;
        "onChange"?: (event: TiDatetimePickerCustomEvent<unknown>) => void;
        "onConfirm"?: (event: TiDatetimePickerCustomEvent<unknown>) => void;
        "optionItemHeight"?: string | number;
        "sort"?: DateTimePickerColumnEnum[];
        "subTitle"?: string;
        "title"?: string;
        "titlebar"?: boolean;
        "type"?: `${DateTimePickerEnum}`;
        "value"?: unknown;
        "visibleItemCount"?: number;
        "yearUseSelectSlot"?: boolean;
    }
    interface TiDialog {
        "cancelBtnText"?: string;
        "cancelButtonBgColor"?: string;
        "cancelButtonColor"?: string;
        "closeOnActions"?: boolean;
        "closeOnMask"?: boolean;
        "confirmBtnText"?: string;
        "confirmButtonBgColor"?: string;
        "confirmButtonColor"?: string;
        "content"?: string;
        "extActionCancelClass"?: string;
        "extActionConfirmClass"?: string;
        "extActionsClass"?: string;
        "extClass"?: string;
        "extContentClass"?: string;
        "extCss"?: string;
        "extInnerClass"?: string;
        "extPopupClass"?: string;
        "extPopupContentClass"?: string;
        "extPopupMaskClass"?: string;
        "extStyle"?: JSXBase.HTMLAttributes<Record<string, unknown>>['style'] | string;
        "extTitleClass"?: string;
        "hasCancelButton"?: boolean;
        "isTextButton"?: boolean;
        "onCancel"?: (event: TiDialogCustomEvent<void>) => void;
        "onClose"?: (event: TiDialogCustomEvent<void>) => void;
        "onConfirm"?: (event: TiDialogCustomEvent<void>) => void;
        "onEnter"?: (event: TiDialogCustomEvent<void>) => void;
        "onEntered"?: (event: TiDialogCustomEvent<void>) => void;
        "onExit"?: (event: TiDialogCustomEvent<void>) => void;
        "onExited"?: (event: TiDialogCustomEvent<void>) => void;
        "timeout"?: number | Timeout;
        "title"?: string;
        "transition"?: TransitionName;
        "useActionsSlot"?: boolean;
        "useContentSlot"?: boolean;
        "visible"?: boolean;
        "zIndex"?: number;
    }
    interface TiDivider {
        "borderColor"?: string;
        "borderWidth"?: number;
        "color"?: string;
        "dashed"?: boolean;
        "extClass"?: string;
        "extCss"?: string;
        "extStyle"?: JSXBase.HTMLAttributes<any>['style'] | string;
        "hairline"?: boolean;
        "orientation"?: `${EDividerOrientation}`;
        "textAlign"?: `${EDividerPosition}`;
    }
    interface TiDropdownItem {
        "activeColor"?: string;
        "closeOnMask"?: boolean;
        "direction"?: 'up' | 'down';
        "disabled"?: boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        "hasMask"?: boolean;
        "hasSubmit"?: boolean;
        "icon"?: string;
        "mode"?: 'single' | 'multiple';
        "onChange"?: (event: TiDropdownItemCustomEvent<string | number | Array<string | number>>) => void;
        "onClose"?: (event: TiDropdownItemCustomEvent<never>) => void;
        "onOpen"?: (event: TiDropdownItemCustomEvent<never>) => void;
        "onSubmit"?: (event: TiDropdownItemCustomEvent<string | number | Array<string | number>>) => void;
        "options"?: TiDropdownItemOption[] | string;
        "submitText"?: string;
        "title": string;
        "type"?: 'checkbox' | 'switch';
        "value"?: string | number | Array<string | number>;
        "visible"?: boolean;
    }
    interface TiDropdownMenu {
        "activeColor"?: string;
        "closeOnMask"?: boolean;
        "direction"?: 'up' | 'down';
        "disabled"?: boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        "getPosition"?: (rect: { rect: DOMRect; direction: 'up' | 'down'; position: IPosition }) => IPosition;
        "hasMask"?: boolean;
        "icon"?: string;
        "mode"?: 'single' | 'multiple';
        "titleClass"?: string;
        "type"?: null;
    }
    interface TiEmpty {
        "extClass"?: string;
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "image"?: string;
        "size"?: string | number;
        "subTitle"?: string;
        "title"?: string;
        "useImageSlot"?: boolean;
        "useTitleSlot"?: boolean;
    }
    interface TiGoodsCard {
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "goodsData"?: IGoodsCart;
        "onClickImage"?: (event: TiGoodsCardCustomEvent<never>) => void;
    }
    interface TiGrid {
        /**
          * 是否使用外边框
          * @deprecated 请使用 `divider` 替代
          * @type boolean
          * @default true
          * @example <TiGrid border />
          * @since 0.1.0
         */
        "border"?: boolean;
        /**
          * 宫格的每行展示的个数， 默认为 `4` 个
          * @type number
          * @default 4
          * @example <TiGrid col="3" />
          * @since 0.1.0
         */
        "columns"?: number;
        /**
          * 排列方向
          * @type string
          * @default 'column'
          * @enum 
          * @example <TiGrid direction="row" />
          * @since 0.1.0
         */
        "direction"?: 'row' | 'column';
        /**
          * 是否使用外边框
          * @type boolean
          * @default true
          * @example <TiGrid border />
          * @since 0.1.0
         */
        "divider"?: boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        /**
          * 宫格之间的间隙宽度
          * @type number
          * @default 0
          * @example <TiGrid gutter="16" />
          * @since 0.1.0
         */
        "gutter"?: number;
        /**
          * 是否以自适应正方形展示
          * @type boolean
          * @default false
          * @example <TiGrid square />
          * @since 0.1.0
         */
        "square"?: boolean;
        /**
          * 宫格标题
          * @type string
          * @default ''
          * @example <TiGrid title="自定义图标，文字内容">  <TiGridItem icon="home" text="Grid" />  <TiGridItem icon="cart" text="购物车" />  <TiGridItem icon="phone" text="电话" /> </TiGrid>
          * @since 0.1.0
         */
        "title"?: string;
    }
    interface TiGridItem {
        /**
          * 文字颜色
          * @type string
          * @default ''
          * @example <TiGridItem icon="home" text="Grid" color="red" />
          * @since 0.1.0
         */
        "color"?: string;
        "contentClass"?: string;
        /**
          * 是否自定义内容
          * @type boolean
          * @default false
          * @example <TiGridItem customContent />
          * @since 0.1.0
         */
        "customContent"?: boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        /**
          * 图标
          * @type string
          * @default ''
          * @example <TiGridItem icon="home" text="Grid" />
          * @since 0.1.0
         */
        "icon"?: string;
        "iconClass"?: string;
        /**
          * 图标尺寸
          * @type number
          * @default ''
          * @example <TiGridItem icon="home" text="Grid" size={{32}} />
          * @since 0.1.0
         */
        "size"?: number;
        /**
          * 文字内容
          * @type string
          * @default ''
          * @example <TiGridItem icon="home" text="Grid" />
          * @since 0.1.0
         */
        "text"?: string;
        "textClass"?: string;
    }
    interface TiIcon {
        "color"?: string;
        "extClass"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "hyphen"?: string;
        "iconStyle"?: string;
        "name"?: string;
        "prefix"?: string;
        "rotate"?: string | number;
        "size"?: string | number;
        "spin"?: boolean;
    }
    interface TiImage {
        "alt"?: string;
        "aspectRatio"?: number | 'inherit';
        "errorIcon"?: string;
        "errorIconSize"?: number;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "height"?: string | number;
        "lazyLoad"?: boolean;
        "loadingIcon"?: string;
        "loadingIconSize"?: number;
        "mode"?: ImageModeEnum;
        "onError"?: (event: TiImageCustomEvent<never>) => void;
        "onLoad"?: (event: TiImageCustomEvent<{ width: number; height: number }>) => void;
        "radius"?: string | number;
        "showError"?: boolean;
        "showLoading"?: boolean;
        "src"?: string;
        "useErrorSlot"?: boolean;
        "useGlobalStyle"?: boolean;
        "useLoadingSlot"?: boolean;
        "width"?: string | number;
    }
    interface TiInput {
        "autofocus"?: boolean;
        "clearable"?: boolean;
        "confirmType"?: 'done' | 'send' | 'search' | 'next' | 'go';
        "disabled"?: boolean;
        "divider"?: boolean;
        "ellipsisLine"?: number;
        "error"?: boolean;
        "errorMessage"?: string;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "inputClass"?: string;
        "inputmode"?: 'text' | 'none' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';
        "label"?: string;
        "labelClass"?: string;
        "maxlength"?: number;
        "onBlur"?: (event: TiInputCustomEvent<EventDetails>) => void;
        "onChange"?: (event: TiInputCustomEvent<EventDetails>) => void;
        "onClear"?: (event: TiInputCustomEvent<never>) => void;
        "onConfirm"?: (event: TiInputCustomEvent<EventDetails>) => void;
        "onFocus"?: (event: TiInputCustomEvent<EventDetails>) => void;
        "onInput"?: (event: TiInputCustomEvent<EventDetails>) => void;
        "placeholder"?: string;
        "prefixIcon"?: string;
        "readOnly"?: boolean;
        "required"?: boolean;
        "showClearIcon"?: boolean;
        "textAlign"?: 'left' | 'right';
        "type"?: 'text' | 'number' | 'safe-password' | 'digit';
        "value"?: string;
    }
    interface TiInputNumber {
        "asyncChange"?: boolean;
        "autoWidth"?: boolean;
        "border"?: boolean;
        "disabled"?: boolean;
        "disabledInput"?: boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        "extInputClass"?: string;
        "extMinusClass"?: string;
        "extPlusClass"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "initOnlyPlus"?: boolean;
        "inputWidth"?: number;
        "integer"?: boolean;
        "max"?: number;
        "min"?: number;
        "onBlur"?: (event: TiInputNumberCustomEvent<{ value: number }>) => void;
        "onChange"?: (event: TiInputNumberCustomEvent<number>) => void;
        "onClickInput"?: (event: TiInputNumberCustomEvent<never>) => void;
        "onFocus"?: (event: TiInputNumberCustomEvent<{ value: number }>) => void;
        "onMinus"?: (event: TiInputNumberCustomEvent<number>) => void;
        "onOverlimit"?: (event: TiInputNumberCustomEvent<{ type: string }>) => void;
        "onPlus"?: (event: TiInputNumberCustomEvent<number>) => void;
        "readOnly"?: boolean;
        "readOnlyInput"?: boolean;
        "round"?: boolean;
        "size"?: 'medium' | 'big';
        "step"?: number;
        "thumbnail"?: boolean;
        "value"?: number | string;
        "variant"?: 'pure' | 'block' | 'bright';
    }
    interface TiLoading {
        "color"?: string;
        /**
          * 图标颜色
          * @type {string}
          * @default ''
          * @enum ://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-direction
          * @example <ti-loading align="horizontal" />
          * @since 0.1.0
          * @memberOf LoadingProps
         */
        "direction"?: string;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        /**
          * loading 展示模式
          * @type {string}
          * @default 'circular'
          * @enum 
          * @example <TiLoading mode="circular" />
          * @since 0.1.0
          * @memberOf LoadingProps
         */
        "mode"?: 'circular' | 'spinner';
        /**
          * loading 尺寸
          * @type {number}
          * @default 72
          * @example <TiLoading size={100} />
          * @since 0.1.0
          * @memberOf LoadingProps
         */
        "size"?: number;
        /**
          * 加载文字
          * @type {string}
          * @default ''
          * @example <TiLoading text="加载中" />
          * @since 0.1.0
          * @memberOf LoadingProps
         */
        "text"?: string;
    }
    interface TiNavbar {
        "background"?: string;
        "extClass"?: string;
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "extSubtitleClass"?: string;
        "extTitleClass"?: string;
        "fontColor"?: string;
        "frostedGlass"?: boolean;
        "leftIcons"?: string[];
        "loading"?: boolean;
        "onBack"?: (event: TiNavbarCustomEvent<{ index: number; name: string }>) => void;
        "onClickIcon"?: (event: TiNavbarCustomEvent<{ index: number; name: string }>) => void;
        "onHome"?: (event: TiNavbarCustomEvent<{ index: number; name: string }>) => void;
        "rightIcons"?: string[];
        "subtitle"?: string;
        "subtitleHeight"?: number;
        "title"?: string;
        "type"?: 'normal' | 'immersion';
        "useBackButton"?: boolean;
        "useHomeButton"?: boolean;
        "usePlaceholder"?: boolean;
    }
    interface TiNoticeBar {
        "color"?: string;
        "content"?: string | string[];
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "leftIcon"?: string;
        "rightIcon"?: string;
        "scrollable"?: string | boolean;
        "speed"?: number;
        "textMode"?: 'auto' | 'wrap' | 'ellipsis' | 'clip';
        "variant"?: 'horizontal' | 'vertical';
    }
    interface TiPicker {
        "cancelText"?: string;
        "cascade"?: T;
        "confirmText"?: string;
        "extClass"?: string;
        "extCss"?: string;
        "extHairlineClass"?: string;
        "extMaskClass"?: string;
        "extOptionClass"?: string;
        "extOptionItemClass"?: string;
        "extOptionStyle"?: JSXBase.HTMLAttributes<Record<string, unknown>>['style'] | string;
        "extStyle"?: JSXBase.HTMLAttributes<Record<string, unknown>>['style'] | string;
        "label"?: string;
        "loading"?: boolean;
        "onCancel"?: (event: TiPickerCustomEvent<unknown>) => void;
        "onChange"?: (event: TiPickerCustomEvent<unknown>) => void;
        "onConfirm"?: (event: TiPickerCustomEvent<unknown>) => void;
        "onReachBottom"?: (event: TiPickerCustomEvent<unknown>) => void;
        "onReachTop"?: (event: TiPickerCustomEvent<unknown>) => void;
        "optionItemHeight"?: string | number;
        "options"?: any[];
        "rowAlias"?: string | number;
        "sports"?: boolean;
        "subTitle"?: string;
        "title"?: string;
        "titlebar"?: boolean;
        "useRowIndex"?: boolean;
        "value"?: any[];
        "visibleItemCount"?: number;
    }
    interface TiPickerColumn {
        "colAlias"?: string;
        "columns"?: unknown[];
        "extClass"?: string;
        "extCss"?: string;
        "extOptionItemClass"?: string;
        "extStyle"?: JSXBase.HTMLAttributes<Record<string, unknown>>['style'] | string;
        "height"?: number;
        "label"?: string;
        "onReachBottom"?: (event: TiPickerColumnCustomEvent<{
    rowIndex: number;
    colAlias: number | string;
  }>) => void;
        "onReachTop"?: (event: TiPickerColumnCustomEvent<{
    rowIndex: number;
    colAlias: number | string;
  }>) => void;
        "onSelect"?: (event: TiPickerColumnCustomEvent<{
    rowIndex: number;
    colAlias: string | number;
  }>) => void;
        "row"?: number;
        "rowAlias"?: string | number;
        "sports"?: boolean;
        "top"?: number;
        "useRowIndex"?: boolean;
        "useSelectSlot"?: boolean;
        "value"?: unknown;
    }
    interface TiPopup {
        "closeOnMask"?: boolean;
        "contentZIndex"?: number;
        "destroyOnClose"?: boolean;
        "disableGlobalTouchMove"?: boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extContentClass"?: string;
        "extContentStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "extCss"?: string;
        "extMaskClass"?: string;
        "extMaskStyle"?: {};
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "hasMask"?: boolean;
        "maskZIndex"?: number;
        "onClose"?: (event: TiPopupCustomEvent<void>) => void;
        "onEnter"?: (event: TiPopupCustomEvent<void>) => void;
        "onEntered"?: (event: TiPopupCustomEvent<void>) => void;
        "onExit"?: (event: TiPopupCustomEvent<void>) => void;
        "onExited"?: (event: TiPopupCustomEvent<void>) => void;
        "onShow"?: (event: TiPopupCustomEvent<void>) => void;
        "position"?: `${EPosition}`;
        "preventScroll"?: boolean;
        "radius"?: string | number;
        "safeArea"?: boolean;
        "timeout"?: number | Timeout;
        "timingFunction"?: string;
        "transition"?: TransitionName;
        "visible"?: boolean;
    }
    interface TiPopupTitlebar {
        "cancelText"?: string;
        "confirmText"?: string;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        "extLeftClass"?: string;
        "extRightClass"?: string;
        "extRightIconClass"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "extTitleClass"?: string;
        "onBack"?: (event: TiPopupTitlebarCustomEvent<any>) => void;
        "onCancel"?: (event: TiPopupTitlebarCustomEvent<any>) => void;
        "onClose"?: (event: TiPopupTitlebarCustomEvent<any>) => void;
        "onConfirm"?: (event: TiPopupTitlebarCustomEvent<any>) => void;
        "subTitle"?: string;
        "title"?: string;
        "variant"?: string;
    }
    interface TiPortal {
        "reference"?: HTMLElement;
        "target"?: HTMLElement;
    }
    interface TiPreview {
        "displayNumber"?: boolean;
        "displayTitle"?: boolean;
        "onChange"?: (event: TiPreviewCustomEvent<{ current: number; item: any }>) => void;
        "onLongpress"?: (event: TiPreviewCustomEvent<{ file: IPreviewItem }>) => void;
    }
    interface TiPrice {
        "extClass"?: string;
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "label"?: string;
        "prefix"?: string;
        "radix"?: number;
        "suffix"?: string;
        "unit"?: string;
        "value"?: number;
    }
    interface TiProgress {
        "buffer"?: number;
        "bufferBgColor"?: string;
        "color"?: string;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        "gradientColor"?: TiProgressGradientColor | string;
        "showProgress"?: boolean;
        "strokeColor"?: string;
        "strokeWidth"?: number;
        "value"?: number;
    }
    interface TiRadio {
        "checked"?: boolean;
        "color"?: string;
        "defaultChecked"?: boolean;
        "disabled"?: boolean | null;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        "icon"?: boolean | string;
        "iconClass"?: string;
        "label"?: string;
        "labelDisabled"?: boolean | null;
        "onChange"?: (event: TiRadioCustomEvent<boolean>) => void;
        "shape"?: 'square' | 'circle' | 'none' | number;
        "size"?: number;
        "value"?: string | number;
    }
    interface TiRadioButton {
        "checked"?: boolean;
        "color"?: string;
        "defaultChecked"?: boolean;
        "disabled"?: boolean | null;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "icon"?: string;
        "label"?: string;
        "onChange"?: (event: TiRadioButtonCustomEvent<boolean>) => void;
        "value"?: string | number;
    }
    interface TiRadioGroup {
        "color"?: string;
        "defaultValue"?: string | number;
        "direction"?: 'horizontal' | 'vertical';
        "disabled"?: boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        "icon"?: string;
        "labelDisabled"?: boolean;
        "onChange"?: (event: TiRadioGroupCustomEvent<string | number>) => void;
        "options"?: RadioItem[];
        "shape"?: 'square' | 'circle' | 'none' | number;
        "size"?: number;
        "value"?: string | number;
    }
    interface TiRate {
        "allowHalf"?: boolean;
        "clearable"?: boolean;
        "count"?: number;
        "disabled"?: boolean;
        "emptyIcon"?: string;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "icon"?: string;
        "iconSize"?: string;
        "onChange"?: (event: TiRateCustomEvent<{ value: number }>) => void;
        "readOnly"?: boolean;
        "value"?: number;
    }
    interface TiRow {
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: {};
        /**
          * 是否是 flex 布局
          * @type boolean
          * @default true
          * @example <ti-row flex>  <ti-col span="6">col 6</ti-col>  <ti-col span="6">col 6</ti-col>  <ti-col span="6">col 6</ti-col>  <ti-col span="6">col 6</ti-col> </ti-row>
          * @since 0.1.0
         */
        "flex"?: boolean;
        /**
          * 列元素之间的间距
          * @type number
          * @default 0
          * @example <ti-row gutter="{{ 16 }}">  <ti-col span="6">col 6</ti-col>  <ti-col span="6">col 6</ti-col>  <ti-col span="6">col 6</ti-col>  <ti-col span="6">col 6</ti-col> </ti-row>
          * @since 0.1.0
         */
        "gutter"?: number;
    }
    interface TiSafeArea {
        "position"?: ESafeArea;
    }
    interface TiScrollView {
        "curScrollIntoView"?: string;
        "curScrollLeft"?: number | string;
        "curScrollTop"?: number | string;
        "extClass"?: string;
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "extVirtualStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "lowerThreshold"?: number | string;
        "onScrolltolower"?: (event: TiScrollViewCustomEvent<{
    direction: 'bottom';
  }>) => void;
        "onScrolltoupper"?: (event: TiScrollViewCustomEvent<{
    direction: 'top';
  }>) => void;
        "onTiScroll"?: (event: TiScrollViewCustomEvent<any>) => void;
        "refresherEnabled"?: boolean;
        "scrollWithAnimation"?: boolean;
        "scrollX"?: boolean;
        "scrollY"?: boolean;
        "upperThreshold"?: number | string;
    }
    interface TiSearch {
        "alwaysShowPrefix"?: boolean;
        "alwaysShowRightIcon"?: boolean;
        "alwaysShowSearch"?: boolean;
        "alwaysShowSuffix"?: boolean;
        "animation"?: boolean;
        "autofocus"?: boolean;
        "center"?: boolean;
        "clearable"?: boolean;
        "confirmType"?: string;
        "disabled"?: boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "inputClass"?: string;
        "leftIcon"?: string;
        "onBlur"?: (event: TiSearchCustomEvent<never>) => void;
        "onChange"?: (event: TiSearchCustomEvent<{ value: string | number }>) => void;
        "onClear"?: (event: TiSearchCustomEvent<never>) => void;
        "onClickInput"?: (event: TiSearchCustomEvent<never>) => void;
        "onFocus"?: (event: TiSearchCustomEvent<never>) => void;
        "onInput"?: (event: TiSearchCustomEvent<InputEvent>) => void;
        "onSearch"?: (event: TiSearchCustomEvent<{ value: string | number }>) => void;
        "onTiClickInput"?: (event: TiSearchCustomEvent<never>) => void;
        "placeholder"?: string;
        "readOnly"?: boolean;
        "searchButtonClass"?: string;
        "searchInnerClass"?: string;
        "useSearchButton"?: boolean;
        "value"?: string;
    }
    interface TiShareSheet {
        "cancelText"?: string;
        "closeOnMask"?: boolean;
        "extClass"?: string;
        "extPopupClass"?: string;
        "extPopupContentClass"?: string;
        "extPopupMaskClass"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes['style'];
        "extTitleClass"?: string;
        "onCancel"?: (event: TiShareSheetCustomEvent<boolean>) => void;
        "onClose"?: (event: TiShareSheetCustomEvent<boolean>) => void;
        "onConfirm"?: (event: TiShareSheetCustomEvent<boolean>) => void;
        "onSelect"?: (event: TiShareSheetCustomEvent<ShareSheetProps>) => void;
        "options"?: ShareSheetProps[] | ShareSheetProps[][];
        "subTitle"?: string;
        "title"?: string;
        "visible"?: boolean;
    }
    interface TiSidebar {
        "activeIndex"?: number;
        "extClass"?: string;
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "onChange"?: (event: TiSidebarCustomEvent<number>) => void;
        "onScrolltolower"?: (event: TiSidebarCustomEvent<{ direction: 'bottom' }>) => void;
        "onScrolltoupper"?: (event: TiSidebarCustomEvent<{ direction: 'top' }>) => void;
        "onTiScroll"?: (event: TiSidebarCustomEvent<any>) => void;
    }
    interface TiSidebarItem {
        "badge"?: string;
        "disabled"?: boolean;
        "dot"?: boolean;
        "extClass"?: string;
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "label"?: string;
    }
    interface TiSku {
        "defaultDispayInfo"?: {};
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "hasQuantityEditor"?: boolean;
        "hasSelectedSpecsText"?: boolean;
        "onTiChange"?: (event: TiSkuCustomEvent<any>) => void;
        "priceUnit"?: string;
        "skus"?: any[];
        "specs"?: any[];
        "value"?: string;
    }
    interface TiSkuSelector {
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "onTiChange"?: (event: TiSkuSelectorCustomEvent<{ value: Record<string, unknown> }>) => void;
        "onTiOptionChange"?: (event: TiSkuSelectorCustomEvent<any>) => void;
        "optionIds"?: any[];
        "skus"?: any[];
        "specs"?: any[];
        "value"?: string;
    }
    interface TiSlider {
        "extCss"?: string;
        "max"?: number;
        "min"?: number;
        "onChange"?: (event: TiSliderCustomEvent<{ value: number | number[] }>) => void;
        "railClass"?: string;
        "step"?: number;
        "thumbClass"?: string;
        "trackClass"?: string;
        "value": number | number[];
    }
    interface TiSteps {
        "activeColor"?: string;
        "alias"?: Record<string, string>;
        "current"?: number | number[];
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "icon"?: string;
        "options"?: TiStepOption[];
        "subtitleAlign"?: 'left' | 'right';
    }
    interface TiSticky {
        "container"?: () => HTMLElement;
        "disabled"?: boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        "offsetTop"?: number;
        "onFixed"?: (event: TiStickyCustomEvent<{
    isFixed: boolean;
    top: number;
  }>) => void;
        "usePureCss"?: boolean;
        "zIndex"?: number;
    }
    interface TiSvgPathView {
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string;
        "fills": string | string[];
        "name"?: string;
        "onTiClick"?: (event: TiSvgPathViewCustomEvent<string>) => void;
        "paths"?: JSXBase.SVGAttributes | JSXBase.SVGAttributes[];
        "rotate"?: string;
        "size"?: string | number;
        "spin"?: boolean;
        "useMask"?: boolean;
        "viewBox"?: string;
    }
    interface TiSwipeCell {
        "asyncClose"?: boolean;
        "disabled"?: boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        "leftWidth"?: number;
        "name"?: string;
        "onClose"?: (event: TiSwipeCellCustomEvent<CloseParams>) => void;
        "onOpen"?: (event: TiSwipeCellCustomEvent<OpenParams>) => void;
        "onTiClick"?: (event: TiSwipeCellCustomEvent<any>) => void;
        "rightWidth"?: number;
        "visible"?: boolean;
    }
    interface TiSwiper {
        "autoplay"?: boolean;
        "centeredSlides"?: boolean;
        "current"?: number;
        "displayMultipleItems"?: number;
        "duration"?: number;
        "extClass"?: string;
        "extContentClass"?: string;
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "interval"?: number;
        "loop"?: boolean;
        "onAnimationFinish"?: (event: TiSwiperCustomEvent<number>) => void;
        "onChange"?: (event: TiSwiperCustomEvent<{
    current: number;
    currentItemId: string;
    source: 'touch' | '';
  }>) => void;
        "pagination"?: 'bullets' | 'fraction' | 'none';
        "spaceBetween"?: number;
        "sports"?: boolean;
        "vertical"?: boolean;
    }
    interface TiSwiperItem {
        "itemId"?: string;
        "skipHiddenItemLayout"?: boolean;
    }
    interface TiSwitch {
        "activeColor"?: string;
        "color"?: string;
        "defaultValue"?: boolean;
        "disabled"?: boolean;
        "extClass"?: string;
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "loading"?: boolean;
        "onChange"?: (event: TiSwitchCustomEvent<boolean>) => void;
        "size"?: number;
        "value"?: unknown;
    }
    interface TiTabbar {
        "activeColor"?: string;
        "color"?: string;
        "extClass"?: string;
        "extCss"?: string;
        "extOptionClass"?: string;
        "extOptionStyle"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "iconSize"?: number;
        "onSelect"?: (event: TiTabbarCustomEvent<unknown>) => void;
        "options"?: Omit<Components.TiTabbarItem, 'updateDataFromParent'>[];
        "placeholder"?: boolean;
        "safeArea"?: boolean;
        "separation"?: `${SeparationEnum}`;
        "titleSize"?: number;
        "value"?: unknown;
    }
    interface TiTabbarItem {
        "activeColor"?: string;
        "color"?: string;
        "extClass"?: string;
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "icon"?: string;
        "iconSize"?: number;
        "title"?: string;
        "titleSize"?: number;
        "value"?: unknown;
    }
    interface TiTabs {
        "activeTab"?: number | string;
        "alias"?: Record<string, string>;
        "asyncChange"?: boolean;
        "autoGap"?: boolean;
        "count"?: number;
        "disabledTabs"?: unknown[];
        "divider"?: `${ETabsDivider}`;
        "extClass"?: string;
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "focusUpdate"?: boolean;
        "gap"?: number;
        "offsetTop"?: number;
        "onChange"?: (event: TiTabsCustomEvent<{
    index: number;
    item: string | { label?: string };
  }>) => void;
        "onDisabled"?: (event: TiTabsCustomEvent<{
    index: number;
    item: string | { label?: string };
  }>) => void;
        "onFixed"?: (event: TiTabsCustomEvent<{
    isFixed: boolean;
    top: number;
  }>) => void;
        "onTiClick"?: (event: TiTabsCustomEvent<{
    index: number;
    item: string | { label?: string };
  }>) => void;
        "sticky"?: boolean;
        "swiperClass"?: string;
        "tabActiveClass"?: string;
        "tabClass"?: string;
        "tabKey"?: string;
        "tabTextActiveClass"?: string;
        "tabTextClass"?: string;
        "tabWidth"?: number;
        "tabs"?: (string | TiTabsOption)[];
        "tabsClass"?: string;
        "tabsMarkClass"?: string;
        "usePureCss"?: boolean;
        "useSlot"?: boolean;
        "variant"?: `${ETabsVariant}`;
    }
    interface TiTag {
        "color"?: string;
        "extClass"?: string;
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "leftIcon"?: string;
        "rightIcon"?: string;
        "shape"?: `${ETagShape}`;
        "size"?: `${ETagSize}`;
        "variant"?: `${ETagVariant}`;
    }
    interface TiTextarea {
        "autoHeight"?: boolean;
        "autofocus"?: boolean;
        "disabled"?: boolean;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "maxlength"?: number;
        "onBlur"?: (event: TiTextareaCustomEvent<{ value: string }>) => void;
        "onConfirm"?: (event: TiTextareaCustomEvent<{ value: string }>) => void;
        "onFocus"?: (event: TiTextareaCustomEvent<never>) => void;
        "onInput"?: (event: TiTextareaCustomEvent<{ value: string }>) => void;
        "placeholder"?: string;
        "showCount"?: boolean;
        "textareaClass"?: string;
        "value"?: string;
    }
    interface TiThumbnail {
        "cols"?: number;
        "disabled"?: boolean;
        "extClass"?: string;
        "extCss"?: string;
        "extThumClass"?: string;
        "extThumImageClass"?: string;
        "extThumOtherClass"?: string;
        "extThumTipClass"?: string;
        "extThumVideoClass"?: string;
        "fileType"?: string;
        "name"?: string;
        "onDelete"?: (event: TiThumbnailCustomEvent<any>) => void;
        "onPreview"?: (event: TiThumbnailCustomEvent<any>) => void;
        "path"?: string;
        "progress"?: number;
        "size"?: 'small' | 'large';
        "status": `${UploadStatus}`;
        "tip"?: string;
        "uploadExercise"?: `${UploadLoadComponentType}`;
        "uploadExerciseText"?: string;
        "uploadFailText"?: string;
    }
    interface TiTitlebar {
        "extClass"?: string;
        "extCss"?: string;
        "extLeftClass"?: string;
        "extLeftIconClass"?: string;
        "extMainTitleClass"?: string;
        "extRightClass"?: string;
        "extRightIconClass"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "extSubTitleClass"?: string;
        "extTitleClass"?: string;
        "leftIcon"?: string;
        "leftText"?: string;
        "onTiClick"?: (event: TiTitlebarCustomEvent<{
    position: 'left' | 'right' | 'title' | 'sub-title';
  }>) => void;
        "rightIcon"?: string;
        "rightText"?: string;
        "subTitle"?: string;
        "title"?: string;
        "useContainer"?: boolean;
        "useLeft"?: boolean;
        "useLeftSlot"?: boolean;
        "useRight"?: boolean;
        "useRightSlot"?: boolean;
        "useTitle"?: boolean;
        "useTitleSlot"?: boolean;
    }
    interface TiToast {
        "extContentStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "extTextClass"?: string;
        "onEnter"?: (event: TiToastCustomEvent<void>) => void;
        "onEntered"?: (event: TiToastCustomEvent<void>) => void;
        "onExit"?: (event: TiToastCustomEvent<void>) => void;
        "onExited"?: (event: TiToastCustomEvent<void>) => void;
        "timeout"?: number | Timeout;
        "transition"?: TransitionName;
        "zIndex"?: number;
    }
    interface TiTooltip {
        "closeOnClick"?: boolean;
        "content"?: string;
        "direction"?: string;
        "extClass"?: string;
        "extContentClass"?: string;
        "extCss"?: string;
        "extInnerClass"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "onClose"?: (event: TiTooltipCustomEvent<void>) => void;
        "visible"?: boolean;
    }
    interface TiTransition {
        "destroyOnExit"?: boolean;
        "enterActiveClass"?: string;
        "enterClass"?: string;
        "enterDoneClass"?: string;
        "enterName"?: string;
        "exitActiveClass"?: string;
        "exitClass"?: string;
        "exitDoneClass"?: string;
        "exitName"?: string;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        "extCss"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: {};
        "name"?: TransitionName;
        "onEnter"?: (event: TiTransitionCustomEvent<void>) => void;
        "onEntered"?: (event: TiTransitionCustomEvent<void>) => void;
        "onEntering"?: (event: TiTransitionCustomEvent<void>) => void;
        "onExit"?: (event: TiTransitionCustomEvent<void>) => void;
        "onExited"?: (event: TiTransitionCustomEvent<void>) => void;
        "onExiting"?: (event: TiTransitionCustomEvent<void>) => void;
        "show"?: boolean;
        "timeout"?: Timeout1 | number;
        "timingFunction"?: string;
    }
    interface TiTreeSelect {
        "activeValue"?: string[];
        "alias"?: Record<string, string>;
        "defaultIndex"?: number;
        "disabledValue"?: unknown[];
        "extClass"?: string;
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "height"?: string | number;
        "icon"?: string;
        "maxCount"?: number;
        "onChangeItem"?: (event: TiTreeSelectCustomEvent<{
    item: TreeOption;
    activeValue: string[];
    current: TreeOption & {
      isActive: boolean;
    };
  }>) => void;
        "onChangeNav"?: (event: TiTreeSelectCustomEvent<{
    index: number;
    item: TreeOption;
  }>) => void;
        "options"?: TreeOption[];
    }
    interface TiUploader {
        "accept"?: string;
        "afterChoose"?: (chooseFileList: UploadFileExternal[], fileList: UploadFileExternal[]) => UploadFileExternal[];
        "afterUpload"?: (
    uploader: TiUploader,
    file: UploadFileExternal,
    fileMap: { [key: string]: UploadFileExternal },
  ) => Partial<UploadFileExternal>;
        "beforeChoose"?: BeforeChooseType;
        "beforeUpload"?: (params: Params, file: UploadFileExternal, list: UploadFileExternal[]) => Params;
        "camera"?: `${UploadCamera}`;
        "choose"?: (list: UploadFile[]) => Promise<UploadFileExternal[]>;
        "chooseIcon"?: string;
        "chooseText"?: string;
        "cols"?: number;
        "complete"?: (file: UploadFileExternal, list: UploadFileExternal[], action: string) => void;
        "count"?: number;
        "defaultValue"?: UploadFileParams[];
        "disabled"?: boolean;
        "extActionClass"?: string;
        "extClass"?: string;
        "extCss"?: string;
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "extThumBoxClass"?: string;
        "extThumClass"?: string;
        "extThumImageClass"?: string;
        "extThumOtherClass"?: string;
        "extThumTipClass"?: string;
        "extThumVideoClass"?: string;
        "fileParams"?: { [key: string]: unknown };
        "fileResultFormat"?: (string | number)[];
        "imageParams"?: { [key: string]: unknown };
        "imageResultFormat"?: (string | number)[];
        "immediately"?: boolean;
        "immediatelyChoose"?: boolean;
        "maxSize"?: number;
        "onChange"?: (event: TiUploaderCustomEvent<{
    fileList: Omit<Required<UploadFileExternal>, 'size' | 'duration' | 'key' | 'file'>[];
    file: Omit<UploadFile, 'key'> | null;
    uploading: boolean;
  }>) => void;
        "onChoose"?: (event: TiUploaderCustomEvent<any>) => void;
        "onClickPlus"?: (event: TiUploaderCustomEvent<any>) => void;
        "onOverlimit"?: (event: TiUploaderCustomEvent<{
    status: string;
    message: string;
  }>) => void;
        "preview"?: (file: UploadFileExternal, list: UploadFile[]) => void;
        "size"?: 'small' | 'large';
        "sourceType"?: ('album' | 'camera')[];
        "upload"?: (uploader: TiUploader, key: string) => void;
        "uploadExercise"?: `${UploadLoadComponentType}`;
        "url"?: string;
        "value"?: unknown;
        "videoParams"?: { [key: string]: unknown };
        "videoResultFormat"?: (string | number)[];
    }
    interface TiVirtualList {
        "containerHeight"?: number;
        /**
          * 额外的类名，添加到根节点的元素上
         */
        "extClass"?: string;
        /**
          * 额外的样式
         */
        "extStyle"?: string | JSXBase.HTMLAttributes<Record<string, unknown>>['style'];
        "itemHeight"?: number;
        "onLoad"?: (event: TiVirtualListCustomEvent<never>) => void;
    }
    interface IntrinsicElements {
        "test-container": TestContainer;
        "ti-action-sheet": TiActionSheet;
        "ti-back-top": TiBackTop;
        "ti-badge": TiBadge;
        "ti-button": TiButton;
        "ti-calendar": TiCalendar;
        "ti-cascade": TiCascade;
        "ti-cell": TiCell;
        "ti-cell-group": TiCellGroup;
        "ti-checkbox": TiCheckbox;
        "ti-checkbox-button": TiCheckboxButton;
        "ti-checkbox-group": TiCheckboxGroup;
        "ti-choose": TiChoose;
        "ti-circle-progress": TiCircleProgress;
        "ti-col": TiCol;
        "ti-collapse": TiCollapse;
        "ti-collapse-item": TiCollapseItem;
        "ti-config-provider": TiConfigProvider;
        "ti-countdown": TiCountdown;
        "ti-datetime-picker": TiDatetimePicker;
        "ti-dialog": TiDialog;
        "ti-divider": TiDivider;
        "ti-dropdown-item": TiDropdownItem;
        "ti-dropdown-menu": TiDropdownMenu;
        "ti-empty": TiEmpty;
        "ti-goods-card": TiGoodsCard;
        "ti-grid": TiGrid;
        "ti-grid-item": TiGridItem;
        "ti-icon": TiIcon;
        "ti-image": TiImage;
        "ti-input": TiInput;
        "ti-input-number": TiInputNumber;
        "ti-loading": TiLoading;
        "ti-navbar": TiNavbar;
        "ti-notice-bar": TiNoticeBar;
        "ti-picker": TiPicker;
        "ti-picker-column": TiPickerColumn;
        "ti-popup": TiPopup;
        "ti-popup-titlebar": TiPopupTitlebar;
        "ti-portal": TiPortal;
        "ti-preview": TiPreview;
        "ti-price": TiPrice;
        "ti-progress": TiProgress;
        "ti-radio": TiRadio;
        "ti-radio-button": TiRadioButton;
        "ti-radio-group": TiRadioGroup;
        "ti-rate": TiRate;
        "ti-row": TiRow;
        "ti-safe-area": TiSafeArea;
        "ti-scroll-view": TiScrollView;
        "ti-search": TiSearch;
        "ti-share-sheet": TiShareSheet;
        "ti-sidebar": TiSidebar;
        "ti-sidebar-item": TiSidebarItem;
        "ti-sku": TiSku;
        "ti-sku-selector": TiSkuSelector;
        "ti-slider": TiSlider;
        "ti-steps": TiSteps;
        "ti-sticky": TiSticky;
        "ti-svg-path-view": TiSvgPathView;
        "ti-swipe-cell": TiSwipeCell;
        "ti-swiper": TiSwiper;
        "ti-swiper-item": TiSwiperItem;
        "ti-switch": TiSwitch;
        "ti-tabbar": TiTabbar;
        "ti-tabbar-item": TiTabbarItem;
        "ti-tabs": TiTabs;
        "ti-tag": TiTag;
        "ti-textarea": TiTextarea;
        "ti-thumbnail": TiThumbnail;
        "ti-titlebar": TiTitlebar;
        "ti-toast": TiToast;
        "ti-tooltip": TiTooltip;
        "ti-transition": TiTransition;
        "ti-tree-select": TiTreeSelect;
        "ti-uploader": TiUploader;
        "ti-virtual-list": TiVirtualList;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "test-container": LocalJSX.TestContainer & JSXBase.HTMLAttributes<HTMLTestContainerElement>;
            "ti-action-sheet": LocalJSX.TiActionSheet & JSXBase.HTMLAttributes<HTMLTiActionSheetElement>;
            "ti-back-top": LocalJSX.TiBackTop & JSXBase.HTMLAttributes<HTMLTiBackTopElement>;
            "ti-badge": LocalJSX.TiBadge & JSXBase.HTMLAttributes<HTMLTiBadgeElement>;
            "ti-button": LocalJSX.TiButton & JSXBase.HTMLAttributes<HTMLTiButtonElement>;
            "ti-calendar": LocalJSX.TiCalendar & JSXBase.HTMLAttributes<HTMLTiCalendarElement>;
            "ti-cascade": LocalJSX.TiCascade & JSXBase.HTMLAttributes<HTMLTiCascadeElement>;
            "ti-cell": LocalJSX.TiCell & JSXBase.HTMLAttributes<HTMLTiCellElement>;
            "ti-cell-group": LocalJSX.TiCellGroup & JSXBase.HTMLAttributes<HTMLTiCellGroupElement>;
            "ti-checkbox": LocalJSX.TiCheckbox & JSXBase.HTMLAttributes<HTMLTiCheckboxElement>;
            "ti-checkbox-button": LocalJSX.TiCheckboxButton & JSXBase.HTMLAttributes<HTMLTiCheckboxButtonElement>;
            "ti-checkbox-group": LocalJSX.TiCheckboxGroup & JSXBase.HTMLAttributes<HTMLTiCheckboxGroupElement>;
            "ti-choose": LocalJSX.TiChoose & JSXBase.HTMLAttributes<HTMLTiChooseElement>;
            "ti-circle-progress": LocalJSX.TiCircleProgress & JSXBase.HTMLAttributes<HTMLTiCircleProgressElement>;
            "ti-col": LocalJSX.TiCol & JSXBase.HTMLAttributes<HTMLTiColElement>;
            "ti-collapse": LocalJSX.TiCollapse & JSXBase.HTMLAttributes<HTMLTiCollapseElement>;
            "ti-collapse-item": LocalJSX.TiCollapseItem & JSXBase.HTMLAttributes<HTMLTiCollapseItemElement>;
            "ti-config-provider": LocalJSX.TiConfigProvider & JSXBase.HTMLAttributes<HTMLTiConfigProviderElement>;
            "ti-countdown": LocalJSX.TiCountdown & JSXBase.HTMLAttributes<HTMLTiCountdownElement>;
            "ti-datetime-picker": LocalJSX.TiDatetimePicker & JSXBase.HTMLAttributes<HTMLTiDatetimePickerElement>;
            "ti-dialog": LocalJSX.TiDialog & JSXBase.HTMLAttributes<HTMLTiDialogElement>;
            "ti-divider": LocalJSX.TiDivider & JSXBase.HTMLAttributes<HTMLTiDividerElement>;
            "ti-dropdown-item": LocalJSX.TiDropdownItem & JSXBase.HTMLAttributes<HTMLTiDropdownItemElement>;
            "ti-dropdown-menu": LocalJSX.TiDropdownMenu & JSXBase.HTMLAttributes<HTMLTiDropdownMenuElement>;
            "ti-empty": LocalJSX.TiEmpty & JSXBase.HTMLAttributes<HTMLTiEmptyElement>;
            "ti-goods-card": LocalJSX.TiGoodsCard & JSXBase.HTMLAttributes<HTMLTiGoodsCardElement>;
            "ti-grid": LocalJSX.TiGrid & JSXBase.HTMLAttributes<HTMLTiGridElement>;
            "ti-grid-item": LocalJSX.TiGridItem & JSXBase.HTMLAttributes<HTMLTiGridItemElement>;
            "ti-icon": LocalJSX.TiIcon & JSXBase.HTMLAttributes<HTMLTiIconElement>;
            "ti-image": LocalJSX.TiImage & JSXBase.HTMLAttributes<HTMLTiImageElement>;
            "ti-input": LocalJSX.TiInput & JSXBase.HTMLAttributes<HTMLTiInputElement>;
            "ti-input-number": LocalJSX.TiInputNumber & JSXBase.HTMLAttributes<HTMLTiInputNumberElement>;
            "ti-loading": LocalJSX.TiLoading & JSXBase.HTMLAttributes<HTMLTiLoadingElement>;
            "ti-navbar": LocalJSX.TiNavbar & JSXBase.HTMLAttributes<HTMLTiNavbarElement>;
            "ti-notice-bar": LocalJSX.TiNoticeBar & JSXBase.HTMLAttributes<HTMLTiNoticeBarElement>;
            "ti-picker": LocalJSX.TiPicker & JSXBase.HTMLAttributes<HTMLTiPickerElement>;
            "ti-picker-column": LocalJSX.TiPickerColumn & JSXBase.HTMLAttributes<HTMLTiPickerColumnElement>;
            "ti-popup": LocalJSX.TiPopup & JSXBase.HTMLAttributes<HTMLTiPopupElement>;
            "ti-popup-titlebar": LocalJSX.TiPopupTitlebar & JSXBase.HTMLAttributes<HTMLTiPopupTitlebarElement>;
            "ti-portal": LocalJSX.TiPortal & JSXBase.HTMLAttributes<HTMLTiPortalElement>;
            "ti-preview": LocalJSX.TiPreview & JSXBase.HTMLAttributes<HTMLTiPreviewElement>;
            "ti-price": LocalJSX.TiPrice & JSXBase.HTMLAttributes<HTMLTiPriceElement>;
            "ti-progress": LocalJSX.TiProgress & JSXBase.HTMLAttributes<HTMLTiProgressElement>;
            "ti-radio": LocalJSX.TiRadio & JSXBase.HTMLAttributes<HTMLTiRadioElement>;
            "ti-radio-button": LocalJSX.TiRadioButton & JSXBase.HTMLAttributes<HTMLTiRadioButtonElement>;
            "ti-radio-group": LocalJSX.TiRadioGroup & JSXBase.HTMLAttributes<HTMLTiRadioGroupElement>;
            "ti-rate": LocalJSX.TiRate & JSXBase.HTMLAttributes<HTMLTiRateElement>;
            "ti-row": LocalJSX.TiRow & JSXBase.HTMLAttributes<HTMLTiRowElement>;
            "ti-safe-area": LocalJSX.TiSafeArea & JSXBase.HTMLAttributes<HTMLTiSafeAreaElement>;
            "ti-scroll-view": LocalJSX.TiScrollView & JSXBase.HTMLAttributes<HTMLTiScrollViewElement>;
            "ti-search": LocalJSX.TiSearch & JSXBase.HTMLAttributes<HTMLTiSearchElement>;
            "ti-share-sheet": LocalJSX.TiShareSheet & JSXBase.HTMLAttributes<HTMLTiShareSheetElement>;
            "ti-sidebar": LocalJSX.TiSidebar & JSXBase.HTMLAttributes<HTMLTiSidebarElement>;
            "ti-sidebar-item": LocalJSX.TiSidebarItem & JSXBase.HTMLAttributes<HTMLTiSidebarItemElement>;
            "ti-sku": LocalJSX.TiSku & JSXBase.HTMLAttributes<HTMLTiSkuElement>;
            "ti-sku-selector": LocalJSX.TiSkuSelector & JSXBase.HTMLAttributes<HTMLTiSkuSelectorElement>;
            "ti-slider": LocalJSX.TiSlider & JSXBase.HTMLAttributes<HTMLTiSliderElement>;
            "ti-steps": LocalJSX.TiSteps & JSXBase.HTMLAttributes<HTMLTiStepsElement>;
            "ti-sticky": LocalJSX.TiSticky & JSXBase.HTMLAttributes<HTMLTiStickyElement>;
            "ti-svg-path-view": LocalJSX.TiSvgPathView & JSXBase.HTMLAttributes<HTMLTiSvgPathViewElement>;
            "ti-swipe-cell": LocalJSX.TiSwipeCell & JSXBase.HTMLAttributes<HTMLTiSwipeCellElement>;
            "ti-swiper": LocalJSX.TiSwiper & JSXBase.HTMLAttributes<HTMLTiSwiperElement>;
            "ti-swiper-item": LocalJSX.TiSwiperItem & JSXBase.HTMLAttributes<HTMLTiSwiperItemElement>;
            "ti-switch": LocalJSX.TiSwitch & JSXBase.HTMLAttributes<HTMLTiSwitchElement>;
            "ti-tabbar": LocalJSX.TiTabbar & JSXBase.HTMLAttributes<HTMLTiTabbarElement>;
            "ti-tabbar-item": LocalJSX.TiTabbarItem & JSXBase.HTMLAttributes<HTMLTiTabbarItemElement>;
            "ti-tabs": LocalJSX.TiTabs & JSXBase.HTMLAttributes<HTMLTiTabsElement>;
            "ti-tag": LocalJSX.TiTag & JSXBase.HTMLAttributes<HTMLTiTagElement>;
            "ti-textarea": LocalJSX.TiTextarea & JSXBase.HTMLAttributes<HTMLTiTextareaElement>;
            "ti-thumbnail": LocalJSX.TiThumbnail & JSXBase.HTMLAttributes<HTMLTiThumbnailElement>;
            "ti-titlebar": LocalJSX.TiTitlebar & JSXBase.HTMLAttributes<HTMLTiTitlebarElement>;
            "ti-toast": LocalJSX.TiToast & JSXBase.HTMLAttributes<HTMLTiToastElement>;
            "ti-tooltip": LocalJSX.TiTooltip & JSXBase.HTMLAttributes<HTMLTiTooltipElement>;
            "ti-transition": LocalJSX.TiTransition & JSXBase.HTMLAttributes<HTMLTiTransitionElement>;
            "ti-tree-select": LocalJSX.TiTreeSelect & JSXBase.HTMLAttributes<HTMLTiTreeSelectElement>;
            "ti-uploader": LocalJSX.TiUploader & JSXBase.HTMLAttributes<HTMLTiUploaderElement>;
            "ti-virtual-list": LocalJSX.TiVirtualList & JSXBase.HTMLAttributes<HTMLTiVirtualListElement>;
        }
    }
}

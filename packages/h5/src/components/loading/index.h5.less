@import '../common/static/utils.less';
@import '../common/static/var.less';
@import '../common/static/mixins/index.less';

@loading: ~'@{project}-loading';

:host {
  display: contents;
}
@keyframes loading-rotate {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

@circularNums: 5;
@spinnerNums: 8;

.@{loading} {
  display: inline-flex;
  position: relative;
  box-sizing: border-box;

  &-wrap {
    display: inline-flex;
    flex-direction: @loading-direction;
    align-items: center;
    margin: @loading-margin;
    padding: @loading-wrap-padding-v @loading-wrap-padding-h;
  }

  &-circular {
    align-items: center;
    justify-content: center;
  }

  &-spinner {
    box-sizing: content-box;

    animation: loading-rotate steps(8) infinite;
    animation-duration: @loading-duration;
  }

  &-view {
    position: absolute;

    &-item {
      box-sizing: border-box;

      border-style: solid;
      border-radius: 50%;
      border-color: transparent;
      border-top-color: @loading-color;

      background-color: transparent;
    }

    &-circular {
      backface-visibility: hidden;

      .generate(@circularNums);

      .generate(@n, @i: 1) when (@i =< @n) {
        @ms: (@i - 1) * 0.04;

        &:nth-of-type(@{i}) {
          animation: loading-rotate cubic-bezier(0.26, 0.38, 0.41, 0.9) infinite;
          animation-duration: @loading-duration;
          animation-delay: ~'@{ms}s';
        }

        .generate(@n, (@i + 1));
      }
    }

    &-spinner {
      position: absolute;
      box-sizing: border-box;
      width: 100%;
      height: 100%;

      &::before {
        content: '';

        display: block;
        width: @loading-width;
        height: 25%;
        margin: 0 auto;

        border-radius: 50%;

        background-color: @loading-color;
      }

      .generate(@spinnerNums);

      .generate(@n, @i: 1) when (@i =< @n) {
        @deg: (@i - 1) * 45;
        @op: 1 - (@i * 0.12);
        &:nth-of-type(@{i}) {
          transform: rotate(~'@{deg}deg');

          opacity: @op;
        }

        .generate(@n, (@i + 1));
      }
    }
  }

  &-text {
    padding: @loading-text-padding-v @loading-text-padding-h @loading-text-padding-v @gap-16;

    color: @loading-text-color;
    font-size: @T28;
    font-weight: @font-weight-400;
    line-height: @line-height;

    &-empty {
      padding: 0;
    }

    & > slot:empty {
      display: none;
    }

    &-column {
      padding: @gap-24 @loading-text-padding-h @loading-text-padding-v;
    }
  }
}
